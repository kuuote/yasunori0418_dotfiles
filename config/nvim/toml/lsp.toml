# LSP plugins
## Builtin lsp core plugins {{{
[[plugins]]
repo = 'neovim/nvim-lspconfig'
depends = [ 'neodev.nvim' ]

[[plugins]]
repo = 'williamboman/mason.nvim'
lua_source = '''
local mason = require('mason')
mason.setup({
  ui = {
    border = 'single',
    icons = {
      package_installed   = '',
      package_pending     = '',
      package_uninstalled = '✗ ',
    },
  }
})
'''

[[plugins]]
repo = 'williamboman/mason-lspconfig.nvim'
on_ft = [ 'toml', 'lua', 'php', 'python' ]
depends = ['nvim-lspconfig', 'mason.nvim', 'lspsaga.nvim']
lua_source = '''
local mason_lspconfig = require('mason-lspconfig')
local lspconfig = require("lspconfig")
local saga = require('lspsaga')
local keymap = vim.keymap.set
local lsp = vim.lsp -- nvim lsp api.
local diag = vim.diagnostic -- nvim diagnostic api.

mason_lspconfig.setup({
  ensure_installed = {
    'sumneko_lua',
    'intelephense',
    'pyright',
  },
  automatic_installation = true,
})

saga.init_lsp_saga({
  border_style = 'single',
  finder_action_keys = {
    open = 'o',
    vsplit = 'v',
    split = 's',
    tabe = 't',
    quit = {'q', '<ESC>'},
  },
  rename_action_quit = '<ESC>',
  rename_in_select = false,
  show_outline = {
    win_with = 'defx',
    win_width = 40,
  }
})

mason_lspconfig.setup_handlers({ function(server_name)
  local lsp_options = {}

  lsp_options.on_attach = function(client, bufnr)
    local keymap_options = { noremap = true, buffer = bufnr }
    -- About <lsp> prefix ~/dotfiles/config/nvim/rc/keybinds.vim:89
    keymap('n', '<lsp>k', '<Cmd>Lspsaga hover_doc<CR>', keymap_options)
    keymap('n', '<lsp>K', '<Cmd>Lspsaga lsp_finder<CR>', keymap_options)
    keymap('n', '<lsp>r', '<Cmd>Lspsaga rename<CR>', keymap_options)
    keymap('n', '<lsp>o', '<Cmd>LSoutlineToggle<CR>', keymap_options)
    keymap({'n', 'x'}, '<lsp>c', '<Cmd>Lspsaga code_action<CR>', keymap_options)
    keymap('n', '<lsp>h', lsp.buf.signature_help, keymap_options)
    keymap('n', '<lsp>=', lsp.buf.formatting, keymap_options)
    keymap('n', '<lsp>i', lsp.buf.implementation, keymap_options)
    keymap('n', '<lsp>d', '<Cmd>Lspsaga peek_definition<CR>', keymap_options)
    keymap('n', '<lsp>D', lsp.buf.declaration, keymap_options)
    keymap('n', '<lsp>e', '<Cmd>Lspsaga show_line_diagnostics<CR>', keymap_options)
    keymap('n', '<lsp>q', diag.setloclist, keymap_options)
    keymap('n', '[d',  '<Cmd>Lspsaga diagnostic_jump_prev<CR>', keymap_options)
    keymap('n', ']d', '<Cmd>Lspsaga diagnostic_jump_next<CR>', keymap_options)
  end

  lsp.handlers['textDocument/hover'] = lsp.with(
    lsp.handlers.hover, {
      border = 'single',
    })

  lsp.handlers['textDocument/signatureHelp'] = lsp.with(
    lsp.handlers.signature_help, {
      border = 'single',
    })

  lsp.handlers['textDocument/publishDiagnostics'] = lsp.with(
    lsp.diagnostic.on_publish_diagnostics, {
      virtual_text = false,
    }
  )

  local capabilities = lsp.protocol.make_client_capabilities()
  capabilities.textDocument.completion.completionItem.snippetSupport = true

  if server_name == 'sumneko_lua' then
    lsp_options.capabilities = capabilities
  end

  lspconfig[server_name].setup(lsp_options)
end })
'''

# }}}

## Language server support plugins {{{
[[plugins]]
repo = 'tsuyoshicho/vim-efm-langserver-settings'

[[plugins]]
repo = 'folke/neodev.nvim'
lua_source = '''
require("neodev").setup({})
'''

[[plugins]]
repo = 'glepnir/lspsaga.nvim'

# }}}

## LSP extends plugins {{{
[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'
on_source = 'nvim-lspconfig'
hook_source = '''
call popup_preview#enable()
'''

[[plugins]]
repo = 'matsui54/denops-signature_help'
on_source = 'nvim-lspconfig'
hook_source = '''
call signature_help#enable()
'''

[[plugins]]
repo = 'j-hui/fidget.nvim'
on_source = 'nvim-lspconfig'
lua_source = '''
require('fidget').setup({
  text = {
    spinner = 'dots',
  },
  window = {
    border = 'single',
    relative = 'editor',
  },
})
'''

# }}}
