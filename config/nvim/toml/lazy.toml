
[[plugins]] # nvim-treesitter
repo = 'nvim-treesitter/nvim-treesitter'
on_event = 'BufRead'
hook_post_update = 'TSUpdate'
lua_source = '''
require("plugins.treesitter")
'''
hook_source = '''
set foldmethod=expr
set foldexpr=nvim_treesitter#foldexpr()
"set nofoldenable
'''

[[plugins]] # treesitter playground
repo = 'nvim-treesitter/playground'
depends = 'nvim-treesitter'
on_cmd = 'TSPlaygroundToggle'
lua_source = '''
require("plugins.playground")
'''

[[plugins]] # nightfox.nvim
repo = 'EdenEast/nightfox.nvim'
depends = ['nvim-treesitter']
on_event = 'VimEnter'
lua_source = '''
require("plugins.nightfox").setup()
'''
lua_post_source = '''
require('plugins.nightfox').compile()
'''

[[plugins]] # lightline.vim
repo = 'itchyny/lightline.vim'
#on_event = ['InsertEnter', 'CmdlineEnter']
on_event = ['VimEnter']
depends = ['vim-gitbranch']
hook_source = '''
set noshowmode
set showtabline=2
set laststatus=3
let g:lightline = {}
let g:lightline.colorscheme = 'nordfox'
" active
let g:lightline.active = {}
let g:lightline.active.left = [
  \ ['mode', 'paste', 'skk_mode'], 
  \ ['relativepath', 'modified'],
  \ ]
let g:lightline.active.right = [
  \ ['percent', 'lineinfo'],
  \ ['fileformat', 'fileencoding', 'filetype'],
  \ ]

" inactive
let g:lightline.inactive = {}
let g:lightline.inactive.left = [
  \ ['filename']
  \ ]
let g:lightline.inactive.right = [
  \ ['lineinfo'],
  \ ['percent'],
  \ ]

let g:lightline.tabline = {}
let g:lightline.tabline.left = [
  \ ['tabs'],
  \ ]
let g:lightline.tabline.right = [
  \ ['git_branch'],
  \ ]

let g:lightline.tab = {}
let g:lightline.tab.active = ['tabnum', 'filename', 'modified']
let g:lightline.tab.inactive = ['tabnum', 'filename']

let g:lightline.separator = {
  \ 'left': '',
  \ 'right': '',
  \ }
let g:lightline.subseparator = {
  \ 'left': '',
  \ 'right': ' ',
  \ }

let g:lightline.component_function = {
  \ 'git_branch': 'vimrc#lightline_git_branch',
  \ 'mode': 'vimrc#lightline_custom_mode',
  \ 'skk_mode': 'lightline_skk#mode',
  \ }

let g:lightline.component_expand = {
  \ 'lsp_ok': 'lightline_lsp#ok',
  \ 'lsp_errors': 'lightline_lsp#errors',
  \ 'lsp_warnings': 'lightline_lsp#warnings',
  \ }

let g:lightline.component_expand_type = {
  \ 'lsp_ok': 'middle',
  \ 'lsp_errors': 'error',
  \ 'lsp_warnings': 'warning',
  \ }

command! -bar LightlineUpdate call lightline#init()| call lightline#colorscheme()| call lightline#update()

'''


[[plugins]] # context_filetype.vim
repo = 'Shougo/context_filetype.vim'
hook_source = '''
let g:context_filetype#ignore_patterns = {
  \ 'toml': ['^\s*#\s*'],
  \ }
'''

[[plugins]] # vimproc.vim
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]] # nvim-notify
repo = 'rcarriga/nvim-notify'
on_source = 'nightfox.nvim'
lua_source = '''
require('plugins.notify')
'''

[[plugins]] # suda.vim
repo = 'lambdalisue/suda.vim'
on_cmd = ['SudaRead', 'SudaWrite']

[[plugins]] # vim-quickrun
repo = 'thinca/vim-quickrun'
on_cmd = 'QuickRun'

[[plugins]] # helpful.vim
repo = 'tweekmonster/helpful.vim'
on_cmd = 'HelpfulVersion'

[[plugins]] # bracey.vim
repo = 'turbio/bracey.vim'
on_cmd = 'Bracey'

[[plugins]] # deol.nvim
repo = 'Shougo/deol.nvim'
on_cmd = 'Deol'
hook_add = '''
nnoremap <term> <Nop>
nmap <Space>s <term>
nnoremap <term>a <Cmd>Deol
  \ -no-auto-cd
  \ -no-start-insert
  \ -split=floating
  \ -winheight=30
  \ -winwidth=120
  \ -toggle<CR>
nnoremap <term>t <Cmd>tabnew<Bar>Deol -no-start-insert<CR>
nnoremap <term>c <Cmd>execute 'Deol'
  \ '-cwd=' . fnamemodify(expand('%'), ':h')
  \ '-no-auto-cd'
  \ '-no-start-insert'
  \ '-split=floating'
  \ '-winheight=30'
  \ '-winwidth=120'
  \ '-toggle'<CR>
nnoremap <term>h <Cmd>Deol
  \ -cwd=~
  \ -no-start-insert
  \ -split=floating
  \ -winheight=30
  \ -winwidth=120
  \ -toggle<CR>

" Escape deol
tnoremap <Esc> <C-\><C-n>
'''
hook_source = '''
" let g:deol#prompt_pattern = '^❯ \?'
" let g:deol#enable_ddc_completion = v:true
let g:deol#shell_history_path = '~/.zsh_history'
let g:deol#enable_dir_changed = v:false
let g:deol#nvim_server = '~/.cache/nvim/server.pipe'
let g:deol#custom_map = {
  \ 'edit': '',
  \ }
let g:deol#floating_border = 'double'
'''

[[plugins]] # lexima.vim
repo = 'cohama/lexima.vim'
on_event = 'InsertEnter'
hook_add = '''
let g:lexima_ctrlh_as_backspace = 1
'''

[[plugins]] # vim-eft
repo = 'hrsh7th/vim-eft'
on_map = { nxo = '<Plug>(eft-' }
hook_add = '''
nmap f <Plug>(eft-f-repeatable)
xmap f <Plug>(eft-f-repeatable)
omap f <Plug>(eft-f-repeatable)
nmap F <Plug>(eft-F-repeatable)
xmap F <Plug>(eft-F-repeatable)
omap F <Plug>(eft-F-repeatable)
'''
hook_source = '''
let g:eft_ignorecase = v:true
'''

[[plugins]] # vim-cursorword
repo = 'itchyny/vim-cursorword'
on_source = 'nightfox.nvim'

[[plugins]] # indent-blankline.nvim
repo = 'lukas-reineke/indent-blankline.nvim'
on_source = 'nightfox.nvim'
lua_source = '''
require("plugins.indent-blankline")
'''

[[plugins]] # matchparen.nvim
repo = 'monkoose/matchparen.nvim'
on_source = 'nightfox.nvim'
lua_source = '''
require('matchparen').setup()
'''

[[plugins]] # vim-sandwich
repo = 'machakann/vim-sandwich'
on_map = { nxo = '<Plug>(sandwich-'}
hook_add = '''
let g:sandwich_no_default_key_mappings = 1

" add
nmap sa <Plug>(sandwich-add)
xmap sa <Plug>(sandwich-add)
omap sa <Plug>(sandwich-add)

" delete
nmap sd <Plug>(sandwich-delete)
xmap sd <Plug>(sandwich-delete)
nmap sdb <Plug>(sandwich-delete-auto)

" replace
nmap sr <Plug>(sandwich-replace)
xmap sr <Plug>(sandwich-replace)
nmap srb <Plug>(sandwich-replace-auto)
'''

[[plugins]] # vim-partedit
repo = 'thinca/vim-partedit'
depends = 'context_filetype.vim'
on_func = 'partedit#start()'
hook_add = '''
nnoremap <Window>e <Cmd>call partedit#start(
  \ context_filetype#get_range()[0][0],
  \ context_filetype#get_range()[1][0],
  \ #{ filetype: context_filetype#get_filetype() })<CR>
'''
hook_source = '''
let g:partedit#opener = 'vsplit'
'''

[[plugins]] # vim-gitbranch
repo = 'itchyny/vim-gitbranch'

[[plugins]] # gitsigns.nvim
repo = 'lewis6991/gitsigns.nvim'
on_source = 'nightfox.nvim'
lua_source = '''
local gitsigns = require('gitsigns')

gitsigns.setup ({
  signs = { -- {{{
    add = {
      hl = 'GitSignsAdd',
      text = '+',
      numhl='GitSignsAddNr',
      linehl='GitSignsAddLn',
    },
    change = {
      hl = 'GitSignsChange',
      text = '│',
      numhl='GitSignsChangeNr',
      linehl='GitSignsChangeLn',
    },
    delete = {
      hl = 'GitSignsDelete',
      text = '_',
      numhl='GitSignsDeleteNr',
      linehl='GitSignsDeleteLn'
    },
    topdelete = {
      hl = 'GitSignsDelete',
      text = '‾',
      numhl='GitSignsDeleteNr',
      linehl='GitSignsDeleteLn'
    },
    changedelete = {
      hl = 'GitSignsChange',
      text = '~',
      numhl='GitSignsChangeNr',
      linehl='GitSignsChangeLn'
    },
    untracked = {
      hl = 'GitSignsAdd',
      text = '┆',
      numhl='GitSignsAddNr',
      linehl='GitSignsAddLn'
    },
  },

  signcolumn = true,  -- Toggle with `:Gitsigns toggle_signs`
  numhl      = true, -- Toggle with `:Gitsigns toggle_numhl`
  linehl     = false, -- Toggle with `:Gitsigns toggle_linehl`
  word_diff  = false, -- Toggle with `:Gitsigns toggle_word_diff`
  watch_gitdir = {
    interval = 1000,
    follow_files = true
  },
  attach_to_untracked = true,
  current_line_blame = false, -- Toggle with `:Gitsigns toggle_current_line_blame`
  current_line_blame_opts = {
    virt_text = true,
    virt_text_pos = 'right_align', -- 'eol' | 'overlay' | 'right_align'
    delay = 1000,
    ignore_whitespace = false,
  },
  current_line_blame_formatter = '<author>, <author_time:%Y-%m-%d> - <summary>',
  sign_priority = 6,
  update_debounce = 100,
  status_formatter = nil, -- Use default
  max_file_length = 40000, -- Disable if file is longer than this (in lines)
  preview_config = {
    -- Options passed to nvim_open_win
    border = 'single',
    style = 'minimal',
    relative = 'cursor',
    row = 0,
    col = 1
  },
  yadm = {
    enable = false
  },
  -- }}}

  -- keybinds {{{
  on_attach = function(bufnr)
    local keymap = vim.keymap.set
    local keymap_options = { noremap = true, buffer = bufnr, expr = true }

    -- Navigation
    keymap('n', '[c', function()
      if vim.wo.diff then return '[c' end
      vim.schedule(function() gitsigns.prev_hunk() end)
      return '<Ignore>'
    end, keymap_options)

    keymap('n', ']c', function()
      if vim.wo.diff then return ']c' end
      vim.schedule(function() gitsigns.next_hunk() end)
      return '<Ignore>'
    end, keymap_options)

    keymap('n', '<git>hs', '<Cmd>Gitsigns stage_hunk<CR>')
    keymap('n', '<git>hr', '<Cmd>Gitsigns reset_hunk<CR>')

  end, -- }}}
})
'''

[[plugins]] # gina.vim
repo = 'lambdalisue/gina.vim'
on_cmd = 'Gina'
hook_add = '''
nnoremap <git>s <Cmd>Gina status<CR>
nnoremap <git>c <Cmd>Gina commit<CR>
nnoremap <git>l <Cmd>Gina log<CR>
nnoremap <git>b <Cmd>Gina blame<CR>
nnoremap <git>d <Cmd>Gina patch<CR>
nnoremap <git>ps <Cmd>Deol git push -split=floating -winheight=30 -winwidth=120 -toggle<CR>
nnoremap <git>pl <Cmd>Deol git pull -split=floating -winheight=30 -winwidth=120 -toggle<CR>
'''
hook_source = '''
call gina#custom#command#option('status', '-s')
call gina#custom#command#option('status', '--opener', 'split')
call gina#custom#command#option('commit', '-v')
call gina#custom#command#option('log', '--opener', 'vsplit')
call gina#custom#command#option('log', '--graph')
call gina#custom#command#option('log', '--all')
call gina#custom#command#option('blame', '--opener', 'tabedit')
call gina#custom#command#option('patch', '--oneside')
'''

# }}}

# denops plugins {{{
[[plugins]] # denops.vim
repo = 'vim-denops/denops.vim'
hook_add = '''
let g:denops_server_addr = '127.0.0.1:32123'
'''

[[plugins]] # skkeleton
repo = 'vim-skk/skkeleton'
depends = 'denops.vim'
on_map = {ic = '<Plug>(skkeleton-toggle)'}
build = 'bash $HOME/dotfiles/bin/skk_dict.sh'
hook_add = '''
imap <C-j> <Plug>(skkeleton-toggle)
cmap <C-j> <Plug>(skkeleton-toggle)
'''
hook_source = '''
augroup skkeleton_autocmds
  autocmd!
  autocmd User skkeleton-initialize-pre call vimrc#skkeleton_init()
  autocmd User skkeleton-enable-pre call vimrc#skkeleton_pre()
  autocmd User skkeleton-disable-pre call vimrc#skkeleton_post()
  autocmd InsertLeave * mode
augroup END
'''

[[plugins]] # lightline_skk.vim
repo = 'yasunori-kirin0418/lightline_skk.vim'
on_source = 'skkeleton'
hook_source = '''
call lightline_skk#option('display', {
\ 'hiragana': 'あぁ﫦',
\ 'katakana': 'アァ﫦',
\ 'hankaku-katakana': 'ｱｧ﫦',
\ 'zenkaku-alphabet': 'Ａａ﫦',
\ 'alphabet': 'Aa﫦',
\ })
'''

[[plugins]] # denops-translate.vim
repo = 'skanehira/denops-translate.vim'
depends = 'denops.vim'
on_cmd = 'Translate'
hook_add = '''
nnoremap te <Cmd>Translate<CR>
nnoremap tj <Cmd>Translate!<CR>
'''

[[plugins]] # denops-silicon.vim
repo = 'skanehira/denops-silicon.vim'
depends = 'denops.vim'
on_cmd = 'Silicon'
hook_source = '''
let g:silicon_options = {
  \ 'font': 'Cica',
  \ 'no_line_number': v:false,
  \ 'no_round_corner': v:false,
  \ 'no_window_controls': v:true,
  \ 'background_color': '#434C5E',
  \ 'line_offset': 1,
  \ 'line_pad': 2,
  \ 'pad_horiz': 80,
  \ 'pad_vert': 100,
  \ 'shadow_blur_radius': 20,
  \ 'shadow_color': '#2E3440',
  \ 'shadow_offset_x': 10,
  \ 'shadow_offset_y': 10,
  \ 'tab_width': &tabstop,
  \ 'theme': 'Nord',
  \ }
'''

[[plugins]] # denops-gitter.vim
repo = '4513ECHO/denops-gitter.vim'
on_event = 'CmdlineEnter'
hook_add = '''
let g:gitter#token = vimrc#read_pat(g:base_dir . 'gitter_pat')[1]
command! OpenReadingVimrc edit gitter://room/vim-jp/reading-vimrc
command! OpenGitterRoomList edit gitter://rooms
'''

# }}}

# filetype plugins {{{

# emmet settings {{{
[[plugins]] # emmet-vim
repo = 'mattn/emmet-vim'
on_ft = ['html', 'css', 'scss', 'php']
hook_add = '''
let g:user_emmet_install_global = 0
let g:user_emmet_leader_key = '<C-k>'
autocmd FileType html,css,scss,php EmmetInstall
let g:user_emmet_settings = {
  \ 'variables': {
    \ 'lang': "ja"
    \ },
  \ 'html': {
    \ 'snippets': {
      \ 'html:5': "<!DOCTYPE html>\n"
      \ ."<html lang=\"${lang}\">\n"
      \ ."\t<head>\n"
      \ ."\t\t<meta charset=\"${charset}\">\n"
      \ ."\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n"
      \ ."\t\t<meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n"
      \ ."\t\t<title></title>\n"
      \ ."\t\t<link rel=\"stylesheet\" href=\"css/style.css\">\n"
      \ ."\t</head>\n"
      \ ."\t<body>\n\t${child}|\n\t</body>\n"
      \ ."</html>",
      \ 'lrl:s': "{{ | }}",
      \ 'lrl:e': "{!! | !!}",
      \ }
    \ },
    \ 'php': {
      \ 'snippets': {
        \ 'php:s': "<?php | ?>",
        \ 'php:e': "<?= | ?>",
        \ 'lrl:s': "{{ | }}",
        \ 'lrl:e': "{!! | !!}",
        \ }
      \ }
  \ }
'''
# }}}

[[plugins]] # vim-json
repo = 'elzr/vim-json'
on_ft = 'json'
hook_source = '''
augroup json_autocmd
  autocmd!
  autocmd FileType json setlocal autoindent
  autocmd FileType json setlocal formatoptions=tcq2l
  autocmd FileType json setlocal textwidth=78 shiftwidth=2
  autocmd FileType json setlocal softtabstop=2 tabstop=2
  autocmd FileType json setlocal expandtab
  autocmd FileType json setlocal foldmethod=syntax
augroup END
'''

[[plugins]] # plantuml-syntax
repo = 'aklt/plantuml-syntax'
on_ft = 'plantuml'

[[plugins]] # vim-maketable
repo = 'mattn/vim-maketable'
on_ft = 'markdown'

[[plugins]] # previm
repo = 'previm/previm'
depends = 'open-browser.vim'
on_ft = 'markdown'
on_cmd = 'PrevimOpen'
hook_add = '''
nnoremap <previm> <Nop>
nmap <Space>p <previm>
nnoremap <previm>o <Cmd>PrevimOpen<CR>
nnoremap <previm>r <Cmd>call previm#refresh()<CR>
'''
hook_source = '''
let g:previm_enable_realtime = 1
let g:previm_disable_default_css = 1
let g:previm_custom_css_path = expand('~/dotfiles/tmp/previm_markdown.css')
let g:previm_plantuml_imageprefix = 'http://localhost:58080/png/'
'''

[[plugins]] # open-browser.vim
repo = 'tyru/open-browser.vim'
hook_add = '''
" open-browser.vim
let g:netrw_nogx = 1 " disable netrw's gx mapping.
nmap gx <Plug>(openbrowser-smart-search)
vmap gx <Plug>(openbrowser-smart-search)
'''
