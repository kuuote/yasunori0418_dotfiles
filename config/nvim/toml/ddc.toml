[[plugins]]
repo = 'Shougo/pum.vim'
hook_source = '''
  call pum#set_option('max_width', 80)
  call pum#set_option('use_complete', v:true)
'''

[[plugins]]
repo = 'Shougo/ddc.vim'
depends = ['context_filetype.vim', 'denops.vim', 'pum.vim']
on_event = ['InsertEnter', 'CmdlineEnter', 'CursorHold']
hook_add = '''
  " Keymaping {{{
  nnoremap ; <Cmd>call vimrc#commandline_pre(':')<CR>:
  xnoremap ; <Cmd>call vimrc#commandline_pre(':')<CR>:

  nnoremap / <Cmd>call vimrc#commandline_pre('/')<CR>/
  nnoremap ? <Cmd>call vimrc#commandline_pre('?')<CR>?
  " }}}
'''
hook_source = '''
  " UI settings {{{

  " Use pum.vim
  call ddc#custom#patch_global('autoCompleteEvents', [
    \ 'InsertEnter', 'TextChangedI', 'TextChangedP',
    \ 'CmdlineEnter', 'CmdlineChanged', 'TextChangedT',
    \ ])

  call ddc#custom#patch_global('ui', 'pum')

  " }}}

  " ddc source settings. {{{
  call ddc#custom#patch_global('sources', ['vsnip', 'around', 'file', 'rg'])

  call ddc#custom#patch_global('cmdlineSources', {
    \ ':': ['cmdline', 'cmdline-history', 'around'],
    \ '@': ['cmdline-history', 'input', 'file', 'around'],
    \ '>': ['cmdline-history', 'input', 'file', 'around'],
    \ '/': ['around', 'line'],
    \ '?': ['around', 'line'],
    \ '-': ['around', 'line'],
    \ '=': ['input'],
    \ })

  " Global configs.
  call ddc#custom#patch_global('sourceOptions', {
    \ '_': {
      \ 'ignoreCase': v:true,
      \ 'matchers': ['matcher_head'],
      \ 'sorters': ['sorter_rank'],
      \ },
    \ 'around': {'mark': 'A'},
    \ })

  " Editor completion source options.
  call ddc#custom#patch_global('sourceOptions', {
    \ 'file': {
      \ 'mark': 'F',
      \ 'isVolatile': v:true,
      \ 'minAutoCompleteLength': 1000,
      \ 'forceCompletionPattern': '\S/\S*',
      \ },
    \ 'vsnip': {
      \ 'mark': 'vsnip',
      \ 'dup': v:true,
      \ },
    \ 'nvim-lsp': {
      \ 'mark': 'lsp',
      \ 'forceCompletionPattern': '\.\w*|:\w*|->\w*',
      \ 'dup': 'force',
      \ },
    \ 'necovim': {'mark': 'vim'},
    \ 'rg': {
      \ 'mark': 'ripgrep',
      \ 'minAutoCompleteLength': 5,
      \ },
    \ 'skkeleton': {
      \ 'mark': 'SKK',
      \ 'matchers': ['skkeleton'],
      \ 'sorters': [],
      \ 'minAutoCompleteLength': 2,
      \ 'isVolatile': v:true,
      \ },
    \ })

  " Commandline completion source options.
  call ddc#custom#patch_global('sourceOptions', {
    \ 'cmdline': {
      \ 'mark': 'cmd',
      \ 'forceCompletionPattern': '\S/\S*',
      \ 'dup': 'force',
      \ },
    \ 'cmdline-history': {
      \ 'mark': 'cmd-history',
      \ 'sorters': [],
      \ },
    \ 'input': {
      \ 'mark': 'input',
      \ 'forceCompletionPattern': '\S/\S*',
      \ 'isVolatile': v:true,
      \ 'dup': 'force',
      \ },
    \ 'line': { 'mark': 'line', },
    \ })

  " }}}

  " filetype settings of ddc-sources. {{{

  call ddc#custom#patch_filetype(['python', 'php', 'lua'], 'sources',
    \ ['nvim-lsp', 'vsnip', 'around', 'file', 'rg'],
    \ )

  call ddc#custom#patch_filetype(['toml', 'vim', 'lua'], 'sources',
    \ ['necovim', 'vsnip', 'around', 'file', 'rg'],
    \ )

  " }}}

  " Keymaping{{{

  " Insert-Mode
  inoremap <expr> <TAB>
    \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
    \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
    \ '<TAB>' : ddc#map#manual_complete()
  inoremap <S-TAB>  <Cmd>call pum#map#insert_relative(-1)<CR>
  inoremap <C-n>    <Cmd>call pum#map#select_relative(+1)<CR>
  inoremap <C-p>    <Cmd>call pum#map#select_relative(-1)<CR>

  inoremap <C-y>    <Cmd>call pum#map#confirm()<CR>
  inoremap <expr> <C-e>
    \ pum#visible() ? '<Cmd>call pum#map#cancel()<CR>' : '<C-o>$'

  " Cmdline-Mode
  cnoremap <expr> <TAB>
    \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
    \ exists('b:prev_buffer_config') ?
    \ ddc#map#manual_complete() : nr2char(&wildcharm)
  cnoremap <S-TAB> <Cmd>call pum#map#insert_relative(-1)<CR>
  cnoremap <C-y> <Cmd>call pum#map#confirm()<CR>
  cnoremap <silent><expr> <C-e>
    \ pum#visible() ? '<Cmd>call pum#map#cancel()<CR>' : '<C-o>$'

  " }}}

  call ddc#enable()
'''

[[plugins]]
repo = 'Shougo/ddc-ui-pum'
on_source = 'ddc.vim'

# ddc-source {{{

[[plugins]]
repo = 'Shougo/ddc-source-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-line'
on_source = 'ddc.vim'

[[plugins]]
repo = 'LumaKernel/ddc-source-file'
on_source ='ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-rg'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-cmdline'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-cmdline-history'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-input'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-nvim-lsp'
on_source = 'nvim-lspconfig'

[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = ['vim']

# }}}

# ddc-filter {{{

[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source ='ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-matcher_length'
on_source ='ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source ='ddc.vim'

[[plugins]]
repo = 'tani/ddc-fuzzy'
on_source = 'ddc.vim'

# }}}

# Snippet plugins. {{{

[[plugins]]
repo = 'hrsh7th/vim-vsnip'
hook_source = '''
imap <expr> <C-k> vsnip#available(1) ? '<Plug>(vsnip-expand-or-jump)' : '<C-k>'
smap <expr> <C-k> vsnip#available(1) ? '<Plug>(vsnip-expand-or-jump)' : '<C-k>'

" Jump forward or backward
imap <expr> <C-n> vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<C-n>'
smap <expr> <C-n> vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<C-n>'
imap <expr> <C-p> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<C-p>'
smap <expr> <C-p> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<C-p>'

let g:vsnip_snippet_dirs = [
  \ expand('~/.vsnip/friendly-snippets/snippets/'),
  \ ]

augroup user_vsnip_autocmd
  autocmd!
  autocmd User PumCompleteDone call vsnip_integ#on_complete_done(g:pum#completed_item)
augroup END
'''

[[plugins]]
repo = 'hrsh7th/vim-vsnip-integ'
depends = 'vim-vsnip'
on_source = 'ddc.vim'

# }}}

# LSP plugins {{{
[[plugins]]
repo = 'tsuyoshicho/vim-efm-langserver-settings'

[[plugins]]
repo = 'neovim/nvim-lspconfig'
depends = ['vim-efm-langserver-settings']
on_source = 'ddc.vim'
lua_source = '''
  lsp_bin = vim.fn.stdpath('data') .. '/mason/bin/'
  nvim_lsp = require('lspconfig')
  nvim_lsp.efm.setup({
    cmd = { lsp_bin .. 'efm-langserver', '-c', vim.fn['efm_langserver_settings#config_path']() },
    filetypes = vim.fn['efm_langserver_settings#whitelist'](),
  })
  nvim_lsp.intelephense.setup({
    cmd = { lsp_bin .. 'intelephense', '--stdio' },
  })
  nvim_lsp.pyright.setup({
    cmd = { lsp_bin .. 'pyright-langserver', '--stdio' },
  })
'''

[[plugins]]
repo = 'williamboman/mason.nvim'
depends = 'mason-lspconfig.nvim'
on_cmd = ['Mason', 'MasonLog', 'MasonInstall', 'MasonUninstall', 'MasonUninstall']
lua_source = '''
  require('mason').setup({
    ui = {
      icons = {
        package_installed   = '',
        package_pending     = '',
        package_uninstalled = '✗',
      }
    }
  })
'''

[[plugins]]
repo = 'williamboman/mason-lspconfig.nvim'
lua_source = '''
  require('mason-lspconfig').setup({
    ensure_installed = {
      'efm',
      'intelephense',
      'pyright',
    },
  })
'''

#[[plugins]]
#repo = 'matsui54/denops-popup-preview.vim'
#on_source = 'ddc-nvim-lsp'
#hook_source = '''
#call popup_preview#enable()
#'''

#[[plugins]]
#repo = 'matsui54/denops-signature_help'
#on_source = 'ddc-nvim-lsp'
#hook_source = '''
#call signature_help#enable()
#'''

# }}}
