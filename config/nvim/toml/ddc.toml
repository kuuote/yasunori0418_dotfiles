[[plugins]]
repo = 'Shougo/pum.vim'
hook_source = '''
  call pum#set_option('max_width', 80)
  call pum#set_option('use_complete', v:true)
'''

[[plugins]]
repo = 'Shougo/ddc.vim'
depends = ['context_filetype.vim', 'denops.vim', 'pum.vim']
on_event = ['InsertEnter', 'CmdlineEnter', 'CursorHold']
hook_add = '''
  " Keymaping {{{
  nnoremap ; <Cmd>call vimrc#commandline_pre(':')<CR>:
  xnoremap ; <Cmd>call vimrc#commandline_pre(':')<CR>:

  nnoremap / <Cmd>call vimrc#commandline_pre('/')<CR>/
  nnoremap ? <Cmd>call vimrc#commandline_pre('?')<CR>?
  " }}}
'''
hook_source = '''
" UI settings {{{

" Use pum.vim
call ddc#custom#patch_global('autoCompleteEvents', [
  \ 'InsertEnter', 'TextChangedI', 'TextChangedP',
  \ 'CmdlineEnter', 'CmdlineChanged', 'TextChangedT',
  \ ])

call ddc#custom#patch_global('ui', 'pum')

" }}}

" ddc source options. {{{
call ddc#custom#patch_global('sources', ['vsnip', 'around', 'file', 'rg'])

call ddc#custom#patch_global('cmdlineSources', {
  \ ':': ['cmdline', 'cmdline-history', 'around'],
  \ '@': ['cmdline-history', 'input', 'file', 'around'],
  \ '>': ['cmdline-history', 'input', 'file', 'around'],
  \ '/': ['around', 'line'],
  \ '?': ['around', 'line'],
  \ '-': ['around', 'line'],
  \ '=': ['input'],
  \ })

" Filters {{{
" Normal filter
"call ddc#custom#patch_global('sourceOptions', #{
"  \ _: #{
"    \ ignoreCase: v:true,
"    \ matchers: ['matcher_head', 'matcher_length'],
"    \ sorters: ['sorter_rank'],
"    \ converters: ['converter_remove_overlap'],
"    \ },
"  \ })

" Fuzzy filter
call ddc#custom#patch_global('sourceOptions', #{
  \ _: #{
    \ ignoreCase: v:true,
    \ matchers: ['matcher_fuzzy'],
    \ sorters: ['sorter_fuzzy'],
    \ converters: ['converter_fuzzy'],
    \ },
  \ })
" }}}

" Editor completion source options.
call ddc#custom#patch_global('sourceOptions', #{
  \ around: #{mark: 'A'},
  \ buffer: #{mark: 'B'},
  \ file: #{
    \ mark: 'F',
    \ isVolatile: v:true,
    \ minAutoCompleteLength: 1000,
    \ forceCompletionPattern: '\S/\S*',
    \ },
  \ vsnip: #{
    \ mark: 'snip',
    \ dup: v:true,
    \ },
  \ nvim-lsp: #{
    \ mark: 'LSP',
    \ forceCompletionPattern: '\.\w*|:\w*|->\w*',
    \ dup: 'force',
    \ },
  \ necovim: #{mark: 'vim'},
  \ rg: #{
    \ mark: 'rg',
    \ minAutoCompleteLength: 5,
    \ },
  \ skkeleton: #{
    \ mark: 'SKK',
    \ matchers: ['skkeleton'],
    \ sorters: [],
    \ minAutoCompleteLength: 2,
    \ isVolatile: v:true,
    \ },
  \ })

" Commandline completion source options.
call ddc#custom#patch_global('sourceOptions', #{
  \ cmdline: #{
    \ mark: 'cmd',
    \ forceCompletionPattern: '\S/\S*',
    \ dup: 'force',
    \ },
  \ cmdline-history: #{
    \ mark: 'cmd-history',
    \ sorters: [],
    \ },
  \ input: #{
    \ mark: 'input',
    \ forceCompletionPattern: '\S/\S*',
    \ isVolatile: v:true,
    \ dup: 'force',
    \ },
  \ line: #{ mark: 'line', },
  \ })

" }}}

" ddc source params {{{
call ddc#custom#patch_global('sourceParams', #{
  \ buffer: #{
    \ requireSameFiletype: v:false,
    \ fromAltBuf: v:true,
    \ bufNameStyle: 'basename',
    \ },
  \ line: #{maxSize: 500},
  \ })
" }}}

" filetype settings of ddc-sources. {{{

call ddc#custom#patch_filetype(['python', 'php', 'lua'], 'sources',
  \ ['nvim-lsp', 'vsnip', 'around', 'file', 'rg'],
  \ )

call ddc#custom#patch_filetype(['vim'], 'sources',
  \ ['necovim', 'vsnip', 'around', 'file', 'rg'],
  \ )

call ddc#custom#patch_filetype(['ddu-ff-filter'], #{
  \ keywordPattern: '[0-9a-zA-Z_:#-]*',
  \ sources: ['line', 'buffer'],
  \ specialBufferCompletion: v:true,
  \ })
  " }}}

  " Keymaping {{{

  " Insert-Mode {{{
  inoremap <expr>   <TAB>
    \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
    \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
    \ '<TAB>' : ddc#map#manual_complete()
  inoremap <S-TAB>  <Cmd>call pum#map#insert_relative(-1)<CR>
  inoremap <C-n>    <Cmd>call pum#map#select_relative(+1)<CR>
  inoremap <C-p>    <Cmd>call pum#map#select_relative(-1)<CR>

  inoremap <C-y>    <Cmd>call pum#map#confirm()<CR>
  inoremap <expr>   <C-e>
    \ pum#visible() ? '<Cmd>call pum#map#cancel()<CR>' : '<C-o>$'
  " }}}

  " Cmdline-Mode {{{
  cnoremap <expr>   <TAB>
    \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
    \ exists('b:prev_buffer_config') ?
    \ ddc#map#manual_complete() : nr2char(&wildcharm)
  cnoremap <S-TAB>  <Cmd>call pum#map#insert_relative(-1)<CR>

  cnoremap <expr>   <C-n>
    \ pum#visible() ? '<Cmd>call pum#map#select_relative(+1)<CR>' : '<C-n>'
  cnoremap <expr>   <C-p>
  \ pum#visible() ? '<Cmd>call pum#map#select_relative(-1)<CR>' : '<C-p>'

  cnoremap <C-y>    <Cmd>call pum#map#confirm()<CR>
  cnoremap <silent><expr> <C-e>
    \ pum#visible() ? '<Cmd>call pum#map#cancel()<CR>' : '<C-e>'
  " }}}

  " }}}

  call ddc#enable()
'''

[[plugins]]
repo = 'Shougo/ddc-ui-pum'
on_source = 'ddc.vim'

# ddc-source {{{

# for editing {{{
[[plugins]]
repo = 'Shougo/ddc-source-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'matsui54/ddc-buffer'
on_source = 'ddc.vim'

[[plugins]]
repo = 'LumaKernel/ddc-source-file'
on_source ='ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-rg'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = ['vim', 'toml']

[[plugins]]
repo = 'Shougo/ddc-source-nvim-lsp'
on_source = 'nvim-lspconfig'

# }}}

# for cmdline and another {{{
[[plugins]]
repo = 'Shougo/ddc-source-line'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-cmdline'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-cmdline-history'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-input'
on_source = 'ddc.vim'

# }}}

# }}}

# ddc-filter {{{

[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source ='ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-matcher_length'
on_source ='ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source ='ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-converter_remove_overlap'
on_source = 'ddc.vim'

[[plugins]]
repo = 'tani/ddc-fuzzy'
on_source = 'ddc.vim'

# }}}

# Snippet plugins. {{{

[[plugins]]
repo = 'hrsh7th/vim-vsnip'
hook_source = '''
imap <expr> <C-k> vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-k>'
smap <expr> <C-k> vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-k>'

" Jump forward or backward
imap <expr> <C-n> vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<C-n>'
smap <expr> <C-n> vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<C-n>'
imap <expr> <C-p> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<C-p>'
smap <expr> <C-p> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<C-p>'

let g:vsnip_snippet_dirs = [
  \ expand('~/.vsnip/friendly-snippets/snippets/'),
  \ ]

let g:vsnip_filetypes = {}

augroup user_vsnip_autocmd
  autocmd!
  autocmd User PumCompleteDone call vsnip_integ#on_complete_done(g:pum#completed_item)
  autocmd InsertEnter ~/dotfiles/config/nvim/toml/*.toml let g:vsnip_filetypes.toml = [context_filetype#get_filetype()]
augroup END
'''

[[plugins]]
repo = 'hrsh7th/vim-vsnip-integ'
depends = 'vim-vsnip'
on_source = 'ddc.vim'

# }}}

# LSP plugins {{{
[[plugins]]
repo = 'tsuyoshicho/vim-efm-langserver-settings'

[[plugins]]
repo = 'folke/neodev.nvim'
lua_source = '''
require("neodev").setup({})
'''

[[plugins]]
repo = 'neovim/nvim-lspconfig'
depends = [ 'neodev.nvim' ]

[[plugins]]
repo = 'williamboman/mason.nvim'
lua_source = '''
local mason = require('mason')
mason.setup({
  ui = {
    border = 'double',
    icons = {
      package_installed   = '',
      package_pending     = '',
      package_uninstalled = '✗ ',
    },
  }
})
'''

[[plugins]]
repo = 'williamboman/mason-lspconfig.nvim'
on_source = 'ddc.vim'
depends = ['nvim-lspconfig', 'mason.nvim']
lua_source = '''
local mason_lspconfig = require('mason-lspconfig')
local nvim_lsp = require("lspconfig")
mason_lspconfig.setup({
  ensure_installed = {
    'sumneko_lua',
  },
  automatic_installation = true,
})

mason_lspconfig.setup_handlers({ function(server_name)
  local lsp_options = {}
  --if server_name == 'sumneko_lua' then
  --  lsp_options.settings = {
  --    Lua = {
  --      completion = {callSnippet = 'Replace'}
  --    }
  --  }
  --end

  require('lspconfig')[server_name].setup(lsp_options)
end })
'''

#[[plugins]]
#repo = 'matsui54/denops-popup-preview.vim'
#on_source = 'ddc-nvim-lsp'
#hook_source = '''
#call popup_preview#enable()
#'''

#[[plugins]]
#repo = 'matsui54/denops-signature_help'
#on_source = 'ddc-nvim-lsp'
#hook_source = '''
#call signature_help#enable()
#'''

# }}}
