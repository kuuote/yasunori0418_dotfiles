[[plugins]]
repo = 'Shougo/pum.vim'

[[plugins]]
repo = 'Shougo/ddc.vim'
depends = ['context_filetype.vim', 'denops.vim', 'pum.vim']
on_event = 'InsertEnter'
hook_add = '''
" US keyboard layout.
nnoremap ; <Cmd>call vimrc#cmdline_pre(':')<CR>:
xnoremap ; <Cmd>call vimrc#cmdline_pre(':')<CR>:

nnoremap / <Cmd>call vimrc#cmdline_pre('/')<CR>/
nnoremap ? <Cmd>call vimrc#cmdline_pre('?')<CR>?
'''
hook_source = '''
call ddc#custom#patch_global('sources', ['vsnip', 'around', 'file', 'rg'])

" ddc source settings. {{{
call ddc#custom#patch_global('sourceOptions', {
  \ '_': {
    \ 'ignoreCase': v:true,
    \ 'matchers': ['matcher_head'],
    \ 'sorters': ['sorter_rank'],
    \ },
  \ 'around': {
    \ 'mark': 'A',
    \ 'matchers': ['matcher_head', 'matcher_length'],
    \ },
  \ 'file': {
    \ 'mark': 'F',
    \ 'isVolatile': v:true,
    \ 'minAutoCompleteLength': 1000,
    \ 'forceCompletionPattern': '\S/\S*',
    \ },
  \ 'vsnip': {
    \ 'mark': 'vsnip',
    \ 'dup': v:true,
    \ },
  \ 'nvim-lsp': {
    \ 'mark': 'lsp',
    \ 'matchers': ['matcher_head'],
    \ 'forceCompletionPattern': '\.\w*|:\w*|->\w*',
    \ 'dup': 'force',
    \ },
  \ 'vim-lsp': {
    \ 'mark': 'lsp',
    \ 'matchers': ['matcher_head'],
    \ 'forceCompletionPattern': '\.\w*|:\w*|->\w*',
    \ },
  \ 'cmdline': {
    \ 'mark': 'cmdline',
    \ 'isVolatile': v:true,
    \ 'forceCompletionPattern': '\S/\S*',
    \ },
  \ 'cmdline-history': {
    \ 'mark': 'history',
    \ 'sorters': [],
    \ },
  \ 'line': {
    \ 'mark': 'line',
    \ },
  \ 'necovim': {'mark': 'necovim'},
  \ 'rg': {
    \ 'mark': 'ripgrep',
    \ 'matchers': ['matcher_head', 'matcher_length'],
    \ 'minAutoCompleteLength': 4,
    \ },
  \ 'zsh': {
    \ 'mark': 'zsh',
    \ 'isVolatile': v:true,
    \ 'forceCompletionPattern': '\S/\S*',
    \ },
  \ 'shell-history': {
    \ 'mark': 'shell',
    \ 'minKeywordLength': 4,
    \ 'maxKeywordLength': 50,
    \ },
  \ })

call ddc#custom#patch_global('sourceOptions', {
  \ 'skkeleton': {
    \ 'mark': 'SKK',
    \ 'matchers': ['skkeleton'],
    \ 'sorters': [],
    \ 'minAutoCompleteLength': 2,
    \ },
  \ })

call ddc#custom#patch_global('sourceParams', {
  \ 'around': {
    \ 'maxSize': 500,
    \ },
  \ })

" }}}

" filetype settings of ddc-sources. {{{

call ddc#custom#patch_filetype(['python', 'php', 'lua'], 'sources',
  \ ['vim-lsp', 'vsnip', 'around', 'file', 'rg'],
  \ )

call ddc#custom#patch_filetype(['toml', 'vim'], 'sources',
  \ ['necovim', 'vsnip', 'around', 'file', 'rg'],
  \ )

" }}}

" Keymaping{{{

" Use pum.vim
call ddc#custom#patch_global('autoCompleteEvents', [
  \ 'InsertEnter', 'TextChangedI', 'TextChangedP',
  \ 'CmdlineEnter', 'CmdlineChanged',
  \ ])

call ddc#custom#patch_global('completionMenu', 'pum.vim')

inoremap <silent><expr> <TAB>
  \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
  \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
  \ '<TAB>' : ddc#manual_complete()
inoremap <silent> <S-TAB> <Cmd>call pum#map#insert_relative(-1)<CR>
inoremap <silent> <C-e> <Cmd>call pum#map#cancel()<CR>

" }}}

call ddc#enable()
'''

# ddc-source {{{

[[plugins]]
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-line'
on_source = 'ddc.vim'

[[plugins]]
repo = 'LumaKernel/ddc-file'
on_source ='ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-rg'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-cmdline'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-cmdline-history'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = ['vim', 'toml']

[[plugins]]
repo = 'Shougo/ddc-zsh'
on_source = 'ddc.vim'

[[plugins]]
repo = 'delphinus/ddc-shell-history'
on_source = 'ddc.vim'

# }}}

# ddc-filter {{{

[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source ='ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-matcher_length'
on_source ='ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source ='ddc.vim'

# }}}

# Snippet plugins. {{{

[[plugins]]
repo = 'hrsh7th/vim-vsnip'
hook_source = '''
imap <expr> <C-k> vsnip#available(1) ? '<Plug>(vsnip-expand-or-jump)' : '<C-k>'
smap <expr> <C-k> vsnip#available(1) ? '<Plug>(vsnip-expand-or-jump)' : '<C-k>'

" Jump forward or backward
imap <expr> <C-n> vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<C-n>'
smap <expr> <C-n> vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<C-n>'
imap <expr> <C-p> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<C-p>'
smap <expr> <C-p> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<C-p>'

let g:vsnip_snippet_dirs = [
  \ expand('~/.vsnip/friendly-snippets/snippets/'),
  \ ]

augroup user_vsnip_autocmd
  autocmd!
  autocmd User PumCompleteDone call vsnip_integ#on_complete_done(g:pum#completed_item)
augroup END
'''

[[plugins]]
repo = 'hrsh7th/vim-vsnip-integ'
depends = 'vim-vsnip'
on_source = 'ddc.vim'

# }}}

# LSP plugins {{{
# [[plugins]]
# repo = 'neovim/nvim-lspconfig'
# depends = ['impatient.nvim', 'ddc.vim']
# on_ft = ['python']
# hook_source = '''
# lua << EOF
# require('lspconfig').pyright.setup{}
# EOF
# '''

# [[plugins]]
# repo = 'Shougo/ddc-nvim-lsp'
# on_source = 'nvim-lspconfig'

# [[plugins]]
# repo = 'matsui54/ddc-nvim-lsp-doc'
# on_source = 'ddc-nvim-lsp'

[[plugins]]
repo = 'prabirshrestha/vim-lsp'

[[plugins]]
repo = 'tsuyoshicho/vim-efm-langserver-settings'
depends = ['vim-lsp']

[[plugins]]
repo = 'mattn/vim-lsp-settings'
depends = ['vim-efm-langserver-settings']
on_ft = ['python', 'markdown', 'php', 'vim', 'lua']
hook_source = '''
" Performance improvements using lua.
let g:lsp_use_lua = v:true

" enable signs
let g:lsp_signs_enabled = 1

" Not use virtual text.
"let g:lsp_diagnostics_virtual_text_enabled = 0

" Use echo from cmdline.
let g:lsp_diagnostics_echo_cursor = 1

" diagnostics signs
"let g:lsp_diagnostics_signs_error = {'text': '✗'}
"let g:lsp_diagnostics_signs_warning = {'text': ''}
"let g:lsp_diagnostics_signs_information = {'text': ''}
"let g:lsp_diagnostics_signs_hint = {'text': ''}

" Document code action sign.
"let g:lsp_document_code_action_signs_hint = {'text': ''}

"let g:lsp_diagnostics_virtual_text_prefix = ''
"let g:lsp_tree_incoming_prefix = ''

" output lsp log file
let g:lsp_log_verbose = 0
"let g:lsp_log_file = expand('~/vim-lsp.log')

" efm-langserver settings {{{

" https://github.com/nakatanakatana/dotfiles
" for efm-langserver-settings
let s:efm_args = []
if efm_langserver_settings#config_enable()
  let s:efm_args = extend(s:efm_args, ['-c', efm_langserver_settings#config_path()])
endif

"let g:efm_langserver_settings#debug = 5

if efm_langserver_settings#debug_enable()
  let s:efm_args = extend(s:efm_args, ['-logfile', efm_langserver_settings#debug_path()])
  let s:efm_args = extend(s:efm_args, ['-loglevel', efm_langserver_settings#debug_enable()])
endif

let g:lsp_settings = {
  \ 'efm-langserver': {
    \ 'disabled': v:false,
    \ 'args': s:efm_args,
    \ 'allowlist': efm_langserver_settings#whitelist(),
    \ 'blocklist': efm_langserver_settings#blacklist(),
    \ }
  \ }

" }}}

" Not show install server suggestion message.
let g:lsp_settings_enable_suggestions = 0
'''

[[plugins]]
repo = 'shun/ddc-vim-lsp'
on_source = ['ddc.vim']

[[plugins]]
repo = 'halkn/lightline-lsp'
on_source = ['vim-lsp']

# }}}
