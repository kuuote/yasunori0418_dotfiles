[[plugins]]
repo = 'Shougo/pum.vim'

[[plugins]]
repo = 'Shougo/ddc.vim'
depends = ['context_filetype.vim', 'denops.vim', 'pum.vim']
on_event = ['InsertEnter', 'CmdlineEnter', 'CursorHold']
hook_add = '''
" US keyboard layout.
nnoremap ; <Cmd>call vimrc#cmdline_pre(':')<CR>:
xnoremap ; <Cmd>call vimrc#cmdline_pre(':')<CR>:

nnoremap / <Cmd>call vimrc#cmdline_pre('/')<CR>/
nnoremap ? <Cmd>call vimrc#cmdline_pre('?')<CR>?
'''
hook_source = '''
" UI settings {{{

" Use pum.vim
call ddc#custom#patch_global('autoCompleteEvents', [
  \ 'InsertEnter', 'TextChangedI', 'TextChangedP',
  \ 'CmdlineEnter', 'CmdlineChanged', 'TextChangedT',
  \ ])

call ddc#custom#patch_global('ui', 'pum')

" }}}

" ddc source settings. {{{
call ddc#custom#patch_global('sources', ['vsnip', 'around', 'file', 'rg'])

call ddc#custom#patch_global('cmdlineSources',
  \ ['cmdline', 'cmdline-history', 'file', 'around', 'input'],
  \ )

call ddc#custom#patch_global('sourceOptions', {
  \ '_': {
    \ 'ignoreCase': v:true,
    \ 'matchers': ['matcher_fuzzy'],
    \ 'sorters': ['sorter_rank'],
    \ },
  \ 'around': {'mark': 'A'},
  \ 'file': {
    \ 'mark': 'F',
    \ 'isVolatile': v:true,
    \ 'minAutoCompleteLength': 1000,
    \ 'forceCompletionPattern': '\S/\S*',
    \ },
  \ 'omni': {'mark': 'O'},
  \ 'vsnip': {
    \ 'mark': 'vsnip',
    \ 'dup': v:true,
    \ },
  \ 'nvim-lsp': {
    \ 'mark': 'lsp',
    \ 'forceCompletionPattern': '\.\w*|:\w*|->\w*',
    \ 'dup': 'force',
    \ },
  \ 'cmdline': {
    \ 'mark': 'cmd',
    \ 'forceCompletionPattern': '\S/\S*',
    \ 'dup': 'force',
    \ },
  \ 'cmdline-history': {
    \ 'mark': 'cmd-history',
    \ 'sorters': [],
    \ },
  \ 'line': { 'mark': 'line', },
  \ 'input': {
    \ 'mark': 'input',
    \ 'forceCompletionPattern': '\S/\S*',
    \ 'isVolatile': v:true,
    \ 'dup': 'force',
    \ },
  \ 'necovim': {'mark': 'vim'},
  \ 'rg': {
    \ 'mark': 'ripgrep',
    \ 'minAutoCompleteLength': 5,
    \ },
  \ })

call ddc#custom#patch_global('sourceOptions', {
  \ 'skkeleton': {
    \ 'mark': 'SKK',
    \ 'matchers': ['skkeleton'],
    \ 'sorters': [],
    \ 'minAutoCompleteLength': 2,
    \ 'isVolatile': v:true,
    \ },
  \ })

call ddc#custom#patch_global('sourceParams', {
  \ 'around': {
    \ 'maxSize': 500,
    \ },
  \ })

" }}}

" filetype settings of ddc-sources. {{{

call ddc#custom#patch_filetype(['python', 'php', 'lua'], 'sources',
  \ ['nvim-lsp', 'vsnip', 'around', 'file', 'rg'],
  \ )

call ddc#custom#patch_filetype(['toml', 'vim', 'lua'], 'sources',
  \ ['necovim', 'vsnip', 'around', 'file', 'rg'],
  \ )

" }}}

" Keymaping{{{

" Insert-Mode
inoremap <silent><expr> <TAB>
  \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
  \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
  \ '<TAB>' : ddc#map#manual_complete()
inoremap <silent> <S-TAB> <Cmd>call pum#map#insert_relative(-1)<CR>
inoremap <silent><expr> <C-e>
  \ pum#visible() ? '<Cmd>call pum#map#cancel()<CR>' : '<C-o>$'

" Cmdline-Mode
cnoremap <expr> <TAB>
  \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
  \ exists('b:prev_buffer_config') ?
  \ ddc#map#manual_complete() : nr2char(&wildcharm)
cnoremap <silent> <S-TAB> <Cmd>call pum#map#insert_relative(-1)<CR>
cnoremap <silent><expr> <C-e>
  \ pum#visible() ? '<Cmd>call pum#map#cancel()<CR>' : '<C-o>$'

" }}}

call ddc#enable()
'''

[[plugins]]
repo = 'Shougo/ddc-ui-pum'
on_source = 'ddc.vim'

# ddc-source {{{

[[plugins]]
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-line'
on_source = 'ddc.vim'

[[plugins]]
repo = 'LumaKernel/ddc-file'
on_source ='ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-rg'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-cmdline'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-cmdline-history'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = ['vim', 'toml']

[[plugins]]
repo = 'Shougo/ddc-input'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-omni'
on_source = 'ddc.vim'

# }}}

# ddc-filter {{{

[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source ='ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-matcher_length'
on_source ='ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source ='ddc.vim'

[[plugins]]
repo = 'tani/ddc-fuzzy'
on_source = 'ddc.vim'

# }}}

# Snippet plugins. {{{

[[plugins]]
repo = 'hrsh7th/vim-vsnip'
hook_source = '''
imap <expr> <C-k> vsnip#available(1) ? '<Plug>(vsnip-expand-or-jump)' : '<C-k>'
smap <expr> <C-k> vsnip#available(1) ? '<Plug>(vsnip-expand-or-jump)' : '<C-k>'

" Jump forward or backward
imap <expr> <C-n> vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<C-n>'
smap <expr> <C-n> vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<C-n>'
imap <expr> <C-p> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<C-p>'
smap <expr> <C-p> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<C-p>'

let g:vsnip_snippet_dirs = [
  \ expand('~/.vsnip/friendly-snippets/snippets/'),
  \ ]

augroup user_vsnip_autocmd
  autocmd!
  autocmd User PumCompleteDone call vsnip_integ#on_complete_done(g:pum#completed_item)
augroup END
'''

[[plugins]]
repo = 'hrsh7th/vim-vsnip-integ'
depends = 'vim-vsnip'
on_source = 'ddc.vim'

# }}}

# LSP plugins {{{
[[plugins]]
repo = 'tsuyoshicho/vim-efm-langserver-settings'

[[plugins]]
repo = 'neovim/nvim-lspconfig'
depends = ['vim-efm-langserver-settings']
on_source = 'ddc.vim'
lua_source = '''
lsp_bin = vim.fn.stdpath('data') .. '/mason/bin/'
nvim_lsp = require('lspconfig')
nvim_lsp.efm.setup({
  cmd = { lsp_bin .. 'efm-langserver', '-c', vim.fn['efm_langserver_settings#config_path']() },
  filetypes = vim.fn['efm_langserver_settings#whitelist'](),
})
nvim_lsp.marksman.setup({
  cmd = { lsp_bin .. 'marksman', 'server' },
})
nvim_lsp.intelephense.setup({
  cmd = { lsp_bin .. 'intelephense', '--stdio' },
})
nvim_lsp.sumneko_lua.setup({
  cmd = { lsp_bin .. 'lua-language-server' },
})
nvim_lsp.pyright.setup({
  cmd = { lsp_bin .. 'pyright-langserver', '--stdio' },
})
'''

[[plugins]]
repo = 'williamboman/mason.nvim'
depends = 'mason-lspconfig.nvim'
on_cmd = ['Mason', 'MasonLog', 'MasonInstall', 'MasonUninstall', 'MasonUninstall']
lua_source = '''
require('mason').setup({
  ui = {
    icons = {
      package_installed   = '',
      package_pending     = '',
      package_uninstalled = '✗',
    }
  }
})
'''

[[plugins]]
repo = 'williamboman/mason-lspconfig.nvim'
lua_source = '''
require('mason-lspconfig').setup({
  ensure_installed = {
    'efm',
    'intelephense',
    'lua-language-server',
    'pyright',
    'marksman',
  },
})
'''

[[plugins]]
repo = 'Shougo/ddc-nvim-lsp'
on_source = 'nvim-lspconfig'

#[[plugins]]
#repo = 'matsui54/denops-popup-preview.vim'
#on_source = 'ddc-nvim-lsp'
#hook_source = '''
#call popup_preview#enable()
#'''

#[[plugins]]
#repo = 'matsui54/denops-signature_help'
#on_source = 'ddc-nvim-lsp'
#hook_source = '''
#call signature_help#enable()
#'''

# }}}
