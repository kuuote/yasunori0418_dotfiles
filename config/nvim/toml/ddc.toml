# ddc plugins

# Core plugins {{{
[[plugins]] # pum.vim
repo = 'Shougo/pum.vim'
hook_source = '''
call pum#set_option(#{
  \ border: 'single',
  \ scrollbar_char: 'â”ƒ',
  \ max_width: 90,
  \ })
'''

[[plugins]] # ddc-ui-pum
repo = 'Shougo/ddc-ui-pum'
on_source = 'ddc.vim'

[[plugins]] # ddc.vim
repo = 'Shougo/ddc.vim'
depends = ['context_filetype.vim', 'denops.vim', 'pum.vim']
on_event = ['InsertEnter', 'CmdlineEnter', 'CursorHold']
hooks_file = '~/.config/nvim/hooks_files/ddc.vim'

# }}}

# source plugins {{{
[[plugins]] # ddc-source-around
repo = 'Shougo/ddc-source-around'
on_source = 'ddc.vim'

[[plugins]] # ddc-buffer
repo = 'matsui54/ddc-buffer'
on_source = 'ddc.vim'

[[plugins]] # ddc-source-file
repo = 'LumaKernel/ddc-source-file'
on_source ='ddc.vim'

[[plugins]] # ddc-source-rg
repo = 'Shougo/ddc-source-rg'
on_source = 'ddc.vim'

[[plugins]] # neco-vim
repo = 'Shougo/neco-vim'
on_ft = ['vim', 'toml', 'help']

[[plugins]] # ddc-source-nvim-lsp
repo = 'Shougo/ddc-source-nvim-lsp'
on_source = 'nvim-lspconfig'

[[plugins]] # ddc-source-line
repo = 'Shougo/ddc-source-line'
on_source = 'ddc.vim'

[[plugins]] # ddc-source-cmdline
repo = 'Shougo/ddc-source-cmdline'
on_source = 'ddc.vim'

[[plugins]] # ddc-source-cmdline-history
repo = 'Shougo/ddc-source-cmdline-history'
on_source = 'ddc.vim'

[[plugins]] # ddc-source-input
repo = 'Shougo/ddc-source-input'
on_source = 'ddc.vim'

# }}}

# filter plugins {{{
[[plugins]] # ddc-matcher_head
repo = 'Shougo/ddc-matcher_head'
on_source ='ddc.vim'

[[plugins]] # ddc-matcher_length
repo = 'Shougo/ddc-matcher_length'
on_source ='ddc.vim'

[[plugins]] # ddc-sorter_rank
repo = 'Shougo/ddc-sorter_rank'
on_source ='ddc.vim'

[[plugins]] # ddc-converter_remove_overlap
repo = 'Shougo/ddc-converter_remove_overlap'
on_source = 'ddc.vim'

[[plugins]] # ddc-fuzzy
repo = 'tani/ddc-fuzzy'
on_source = 'ddc.vim'

# }}}

# snippet plugins {{{
[[plugins]] # vim-vsnip
repo = 'hrsh7th/vim-vsnip'
hook_source = '''
imap <expr> <C-k> vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-k>'
smap <expr> <C-k> vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-k>'

" Jump forward or backward
imap <expr> <C-n> vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<C-n>'
smap <expr> <C-n> vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<C-n>'
imap <expr> <C-p> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<C-p>'
smap <expr> <C-p> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<C-p>'

let g:vsnip_snippet_dirs = [
  \ expand('~/.vsnip/friendly-snippets/snippets/'),
  \ ]

let g:vsnip_filetypes = {}

augroup user_vsnip_autocmd
  autocmd!
  autocmd User PumCompleteDone call vsnip_integ#on_complete_done(g:pum#completed_item)
  autocmd InsertEnter ~/dotfiles/config/nvim/toml/*.toml let g:vsnip_filetypes.toml = [context_filetype#get_filetype()]
augroup END
'''

[[plugins]] # vim-vsnip-integ
repo = 'hrsh7th/vim-vsnip-integ'
depends = 'vim-vsnip'
on_source = 'ddc.vim'
# }}}
