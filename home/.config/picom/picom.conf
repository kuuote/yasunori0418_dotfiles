# Thank you code_nomad: http://9m.no/ꪯ鵞
# and Arch Wiki contributors: https://wiki.archlinux.org/index.php/Compton

#################################
#
# Backend
#
#################################

# Backend to use: "xrender" or "glx".
# GLX backend is typically much faster but depends on a sane driver.
# 使用するバックエンド：「xrender」または「glx」。
# GLXバックエンドは通常はるかに高速ですが、正常なドライバーに依存します。
backend = "glx";

#################################
#
# GLX backend
#
#################################

glx-no-stencil = true;

# GLX backend: Copy unmodified regions from front buffer instead of redrawing them all.
# My tests with nvidia-drivers show a 10% decrease in performance when the whole screen is modified,
# but a 20% increase when only 1/4 is.
# My tests on nouveau show terrible slowdown.
# GLXバックエンド：変更されていない領域をすべて再描画するのではなく、フロントバッファーからコピーします。
# nvidia-driversを使用したテストでは、画面全体を変更するとパフォーマンスが10％低下することが示されています。
# しかし、1/4だけの場合は20％増加します。
# nouveauでの私のテストは、ひどい減速を示しています。
glx-copy-from-front = false;

# GLX backend: Use MESA_copy_sub_buffer to do partial screen update.
# My tests on nouveau shows a 200% performance boost when only 1/4 of the screen is updated.
# May break VSync and is not available on some drivers.
# GLXバックエンド：MESA_copy_sub_bufferを使用して、画面の部分的な更新を行います。
# nouveauでの私のテストでは、画面の1/4だけが更新されると、パフォーマンスが200％向上することが示されています。
# VSyncが破損する可能性があり、一部のドライバーでは使用できません。
# Overrides --glx-copy-from-front.
# glx-use-copysubbuffermesa = true;

# GLX backend: Avoid rebinding pixmap on window damage.
# Probably could improve performance on rapid window content changes, but is known to break things on some drivers (LLVMpipe).
# Recommended if it works.
# GLXバックエンド：ウィンドウが損傷したときにピックスマップを再バインドしないでください。
# おそらく、ウィンドウコンテンツの急激な変更でパフォーマンスが向上する可能性がありますが、一部のドライバー（LLVMpipe）で問題が発生することが知られています。
# 動作する場合に推奨されます。
# glx-no-rebind-pixmap = true;

# GLX backend: GLX buffer swap method we assume.
# Could be undefined (0), copy (1), exchange (2), 3-6, or buffer-age (-1).
# undefined is the slowest and the safest, and the default value.
# copy is fastest, but may fail on some drivers,
# 2-6 are gradually slower but safer (6 is still faster than 0).
# Usually, double buffer means 2, triple buffer means 3.
# buffer-age means auto-detect using GLX_EXT_buffer_age, supported by some drivers.
# GLXバックエンド：想定するGLXバッファースワップメソッド。
# 未定義（0）、コピー（1）、交換（2）、3-6、またはバッファー経過時間（-1）の可能性があります。
# undefinedは最も遅く、最も安全で、デフォルト値です。
# コピーは最速ですが、一部のドライバーでは失敗する可能性があります。
# 2〜6は徐々に遅くなりますが、安全です（6は0よりも高速です）。
# 通常、ダブルバッファは2を意味し、トリプルバッファは3を意味します。
# buffer-ageは、GLX_EXT_buffer_ageを使用した自動検出を意味し、一部のドライバーでサポートされています。
# Useless with --glx-use-copysubbuffermesa.
# Partially breaks --resize-damage.

# Defaults to undefined.
# デフォルトは未定義です。
#glx-swap-method = "undefined"; #deprecated !
#use-damage = true

#################################
#
# Shadows
#
#################################

# Enabled client-side shadows on windows.
# ウィンドウでクライアント側のシャドウを有効にしました。
shadow = true;

# The blur radius for shadows. (default 12)
# 影のぼかし半径。 （デフォルトは12）
shadow-radius = 5;

# The left offset for shadows. (default -15)
# 影の左オフセット。 （デフォルト-15）
shadow-offset-x = 1;

# The top offset for shadows. (default -15)
# 影の上部オフセット。 （デフォルト-15）
shadow-offset-y = 1;

# The translucency for shadows. (default .75)
# 影の半透明。 （デフォルトは.75）
shadow-opacity = 0.3;

# Set if you want different colour shadows
# 別の色の影が必要な場合に設定します
# shadow-red = 0.0;
# shadow-green = 0.0;
# shadow-blue = 0.0;

# The shadow exclude options are helpful if you have shadows enabled. Due to the way picom draws its shadows, certain applications will have visual glitches
# (most applications are fine, only apps that do weird things with xshapes or argb are affected).
# This list includes all the affected apps I found in my testing. The "! name~=''" part excludes shadows on any "Unknown" windows, this prevents a visual glitch with the XFWM alt tab switcher.
# シャドウを有効にしている場合は、シャドウ除外オプションが役立ちます。 picomが影を描く方法が原因で、特定のアプリケーションには視覚的な不具合が発生します
# （ほとんどのアプリケーションは問題ありません。xshapesまたはargbで奇妙なことをするアプリだけが影響を受けます）。
# このリストには、テストで見つかった影響を受けるすべてのアプリが含まれています。 「！name〜 = ''」の部分は、「不明な」ウィンドウの影を除外します。これにより、XFWMaltタブスイッチャーでの視覚的な不具合が防止されます。
shadow-exclude = [
    "! name~=''",
    "name = 'Notification'",
    "name = 'Plank'",
    "name = 'Docky'",
    "name = 'Kupfer'",
    "name = 'xfce4-notifyd'",
    "name *= 'VLC'",
    "name *= 'compton'",
    "name *= 'picom'",
    "name *= 'Chromium'",
    "name *= 'Chrome'",
    "class_g = 'Firefox' && argb",
    "class_g = 'Conky'",
    "class_g = 'Kupfer'",
    "class_g = 'Synapse'",
    "class_g ?= 'Notify-osd'",
    "class_g ?= 'Cairo-dock'",
    "class_g ?= 'Xfce4-notifyd'",
    "class_g ?= 'Xfce4-power-manager'",
    "class_g ?= 'Dmenu'",
#	   "class_g ?= 'Dunst'",
# disables shadows on i3 frames
# i3フレームのシャドウを無効にします
    "class_g ?= 'i3-frame'",
    "_GTK_FRAME_EXTENTS@:c",
    "_NET_WM_STATE@:32a *= '_NET_WM_STATE_HIDDEN'"
];

# Avoid drawing shadow on all shaped windows (see also: --detect-rounded-corners)
# すべての形状のウィンドウに影を描くことは避けてください（--detect-rounded-cornersも参照）
shadow-ignore-shaped = false;

#################################
#
# Opacity
#
#################################

inactive-opacity = 1;
active-opacity = 1;
frame-opacity = 1;
inactive-opacity-override = false;

# Dim inactive windows. (0.0 - 1.0)
# 非アクティブなウィンドウを暗くします。 （0.0-1.0）
# inactive-dim = 0.2;

# Do not let dimness adjust based on window opacity.
# ウィンドウの不透明度に基づいて暗さを調整しないでください。
# inactive-dim-fixed = true;

# Blur background of transparent windows. Bad performance with X Render backend. GLX backend is preferred.
# 透明なウィンドウの背景をぼかします。 XRenderバックエンドのパフォーマンスが悪い。 GLXバックエンドが推奨されます。
# blur-background = true;

# Blur background of opaque windows with transparent frames as well.
# 透明なフレームを持つ不透明なウィンドウの背景もぼかします。
# blur-background-frame = true;

# Do not let blur radius adjust based on window opacity.
# ウィンドウの不透明度に基づいてぼかし半径を調整しないでください。
blur-background-fixed = false;

blur-background-exclude = [
    "window_type = 'dock'",
    "window_type = 'desktop'"
];

#################################
#
# Fading
#
#################################

# Fade windows during opacity changes.
# 不透明度の変更中にウィンドウをフェードします。
fading = false;

# The time between steps in a fade in milliseconds. (default 10).
# ミリ秒単位のフェードのステップ間の時間。 （デフォルトは10）。
fade-delta = 1;

# Opacity change between steps while fading in. (default 0.028).
# フェードイン中のステップ間の不透明度の変化。（デフォルトは0.028）。
fade-in-step = 0.03;

# Opacity change between steps while fading out. (default 0.03).
# フェードアウト中のステップ間の不透明度の変化。 （デフォルトは0.03）。
fade-out-step = 0.03;

# Fade windows in/out when opening/closing
# 開閉時にウィンドウをフェードイン/フェードアウト
# no-fading-openclose = true;

# Specify a list of conditions of windows that should not be faded.
# 色あせてはいけないウィンドウの状態のリストを指定します。
fade-exclude = [ ];

#################################
#
# Other
#
#################################

# Try to detect WM windows and mark them as active.
# WMウィンドウを検出し、アクティブとしてマークしてみてください。
mark-wmwin-focused = true;

# Mark all non-WM but override-redirect windows active (e.g. menus).
# すべての非WMをマークしますが、オーバーライドリダイレクトウィンドウはアクティブです（メニューなど）。
mark-ovredir-focused = true;

# Use EWMH _NET_WM_ACTIVE_WINDOW to determine which window is focused instead of using FocusIn/Out events.
# Usually more reliable but depends on a EWMH-compliant WM.
# FocusIn / Outイベントを使用する代わりに、EWMH_NET_WM_ACTIVE_WINDOWを使用してフォーカスされているウィンドウを判別します。
# 通常は信頼性が高くなりますが、EWMH準拠のWMに依存します。
use-ewmh-active-win = true;

# Detect rounded corners and treat them as rectangular when --shadow-ignore-shaped is on.
# --shadow-ignore-shapeがオンの場合、丸みを帯びた角を検出し、長方形として扱います。
detect-rounded-corners = true;

# Detect _NET_WM_OPACITY on client windows, useful for window managers not passing _NET_WM_OPACITY of client windows to frame windows.
# This prevents opacity being ignored for some apps.
# For example without this enabled my xfce4-notifyd is 100% opacity no matter what.
# クライアントウィンドウで_NET_WM_OPACITYを検出します。これは、クライアントウィンドウの_NET_WM_OPACITYをフレームウィンドウに渡さないウィンドウマネージャーに役立ちます。
# これにより、一部のアプリで不透明度が無視されるのを防ぎます。
# たとえば、これを有効にしないと、xfce4-notifydは何があっても100％不透明になります。
detect-client-opacity = true;

# Specify refresh rate of the screen.
# If not specified or 0, picom will try detecting this with X RandR extension.
# 画面のリフレッシュレートを指定します。
# 指定されていないか0の場合、picomはXRandR拡張機能を使用してこれを検出しようとします。
refresh-rate = 60;

# Vertical synchronization: match the refresh rate of the monitor
# 垂直同期：モニターのリフレッシュレートに一致
vsync = false;

# Enable DBE painting mode, intended to use with VSync to (hopefully) eliminate tearing.
# Reported to have no effect, though.
# DBEペイントモードを有効にします。これは、VSyncで使用して（うまくいけば）ティアリングを排除することを目的としています。
# ただし、効果はないと報告されています。
dbe = false;

# Limit picom to repaint at most once every 1 / refresh_rate second to boost performance.
# This should not be used with --vsync drm/opengl/opengl-oml as they essentially does --sw-opti's job already,
# unless you wish to specify a lower refresh rate than the actual value.
# パフォーマンスを向上させるために、picomが最大で1 / refresh_rate秒ごとに1回再描画するように制限します。
# これは--vsyncdrm / opengl / opengl-omlと一緒に使用しないでください。これは、基本的に--sw-optiの仕事をすでに行っているためです。
# 実際の値よりも低いリフレッシュレートを指定する場合を除きます。
#sw-opti = true;

# Unredirect all windows if a full-screen opaque window is detected, to maximize performance for full-screen windows, like games.
# Known to cause flickering when redirecting/unredirecting windows.
# フルスクリーンの不透明なウィンドウが検出された場合は、すべてのウィンドウのリダイレクトを解除して、ゲームなどのフルスクリーンウィンドウのパフォーマンスを最大化します。
# ウィンドウのリダイレクト/リダイレクト解除時にちらつきを引き起こすことが知られています。
unredir-if-possible = true;

# Specify a list of conditions of windows that should always be considered focused.
# 常にフォーカスされていると見なす必要があるウィンドウの条件のリストを指定します。
focus-exclude = [ "class_g = 'Cairo-clock'" ];

# Use WM_TRANSIENT_FOR to group windows, and consider windows in the same group focused at the same time.
# WM_TRANSIENT_FORを使用してウィンドウをグループ化し、同じグループ内のウィンドウが同時にフォーカスされていると見なします。
detect-transient = true;

# Use WM_CLIENT_LEADER to group windows, and consider windows in the same group focused at the same time.
# WM_CLIENT_LEADERを使用してウィンドウをグループ化し、同じグループ内のウィンドウが同時にフォーカスされていると見なします。
# WM_TRANSIENT_FOR has higher priority if --detect-transient is enabled, too.
detect-client-leader = true;

#################################
#
# Window type settings
#
#################################

wintypes :
{
  tooltip :
  {
    fade = true;
    shadow = false;
    opacity = 0.85;
    focus = true;
  };
  fullscreen :
  {
    fade = true;
    shadow = false;
    opacity = 1;
    focus = true;
  };
};

######################
#
# XSync
# See: https://github.com/yshui/picom/commit/b18d46bcbdc35a3b5620d817dd46fbc76485c20d
#
######################

# Use X Sync fence to sync clients' draw calls. Needed on nvidia-drivers with GLX backend for some users.
# X Syncフェンスを使用して、クライアントの描画呼び出しを同期します。 一部のユーザーのGLXバックエンドを備えたnvidiaドライバーで必要です。
xrender-sync-fence = true;

#opacity-rule = [
#"99:name *?= 'Call'",
#"99:class_g = 'Chromium'",
#"99:name *?= 'Conky'",
#"99:class_g = 'Darktable'",
#"50:class_g = 'Dmenu'",
#"99:name *?= 'Event'",
#"99:class_g = 'Firefox'",
#"99:class_g = 'GIMP'",
#"99:name *?= 'Image'",
#"99:class_g = 'Lazpaint'",
#"99:class_g = 'Midori'",
#"99:name *?= 'Minitube'",
#"99:class_g = 'Mousepad'",
#"99:name *?= 'MuseScore'",
#"90:name *?= 'Page Info'",
#"99:name *?= 'Pale Moon'",
#"90:name *?= 'Panel'",
#"99:class_g = 'Pinta'",
#"90:name *?= 'Restart'",
#"99:name *?= 'sudo'",
#"99:name *?= 'Screenshot'",
#"99:class_g = 'Viewnior'",
#"99:class_g = 'VirtualBox'",
#"99:name *?= 'VLC'",
#"99:name *?= 'Write'",
#"93:class_g = 'URxvt' && !_NET_WM_STATE@:32a",
#"0:_NET_WM_STATE@:32a *= '_NET_WM_STATE_HIDDEN'",
#"96:_NET_WM_STATE@:32a *= '_NET_WM_STATE_STICKY'"
#];
