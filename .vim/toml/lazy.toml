[[plugins]]
repo = 'lewis6991/impatient.nvim'
hook_source = '''
lua require('impatient')
'''

[[plugins]]
repo = 'nathom/filetype.nvim'
depends = ['impatient.nvim']

# Color scheme {{{
[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
depends = ['filetype.nvim']
hook_post_update = 'TSUpdate'
hook_source = '''
lua << EOF
require'nvim-treesitter.configs'.setup {
  ensure_installed = 'all',
  highlight = {
    enable = true,
    disable = { 'swift' },
  },
  indent = {
    enable = true,
  },
}
EOF
'''

[[plugins]]
repo = 'EdenEast/nightfox.nvim'
depends = ['nvim-treesitter']
hook_source = '''
source ~/dotfiles/.vim/plugins/nightfox.lua
'''

# }}}

# lightline {{{

[[plugins]]
repo = 'itchyny/vim-gitbranch'

[[plugins]] # Modern and light status line.
repo = 'itchyny/lightline.vim'
on_event = ['CursorHold', 'CursorMoved', 'InsertEnter', 'CmdlineEnter']
depends = ['vim-gitbranch', 'nightfox.nvim']
hook_add = '''
source ~/dotfiles/.vim/plugins/lightline.vim
'''

# }}}

[[plugins]]
repo = 'rcarriga/nvim-notify'
on_source = 'nightfox.nvim'
hook_source = '''
lua << EOF
require('notify').setup({
  stages = 'slide',
  background_color = 'NormalFloat',
})
vim.notify = require('notify')
EOF
'''

[[plugins]]
repo = 'lambdalisue/suda.vim'
on_cmd = ['SudaRead', 'SudaWrite']

[[plugins]]
repo = 'Shougo/deol.nvim'
on_cmd = 'Deol'
hook_add = '''
nnoremap [term] <Nop>
nmap <Space>t [term]
nnoremap [term]a <Cmd>Deol
  \ -no-auto-cd
  \ -no-start-insert
  \ -split=floating
  \ -winheight=30
  \ -winwidth=120
  \ -toggle<CR>
nnoremap [term]t <Cmd>tabnew<Bar>Deol -no-start-insert<CR>
nnoremap [term]c <Cmd>execute 'Deol'
  \ '-cwd=' . fnamemodify(expand('%'), ':h')
  \ '-no-auto-cd'
  \ '-no-start-insert'
  \ '-split=floating'
  \ '-winheight=30'
  \ '-winwidth=120'
  \ '-toggle'<CR>
nnoremap [term]h <Cmd>Deol
  \ -cwd=~
  \ -no-start-insert
  \ -split=floating
  \ -winheight=30
  \ -winwidth=120
  \ -toggle<CR>

" Escape deol
tnoremap <Esc> <C-\><C-n>
'''
hook_source = '''
" let g:deol#prompt_pattern = '^❯ \?'
" let g:deol#enable_ddc_completion = v:true
let g:deol#shell_history_path = '~/.zsh_history'
let g:deol#enable_dir_changed = v:false
let g:deol#nvim_server = '~/.cache/nvim/server.pipe'
'''

[[plugins]]
repo = 'cohama/lexima.vim'
on_event = 'InsertEnter'

[[plugins]]
repo = 'itchyny/vim-cursorword'
on_source = 'nightfox.nvim'

[[plugins]]
repo = 'airblade/vim-gitgutter'
on_source = 'nightfox.nvim'

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
on_source = 'nightfox.nvim'
hook_source = '''
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_default_mapping = 0
let g:indent_guides_exclude_filetypes = ['help', 'ddu-ff-filter', 'ddu-ff', 'ddu-filer', 'deol']
'''

[[plugins]]
repo = 'hrsh7th/vim-eft'
on_map = { nxo = '<Plug>(eft-' }
hook_add = '''
nmap f <Plug>(eft-f-repeatable)
xmap f <Plug>(eft-f-repeatable)
omap f <Plug>(eft-f-repeatable)
nmap F <Plug>(eft-F-repeatable)
xmap F <Plug>(eft-F-repeatable)
omap F <Plug>(eft-F-repeatable)
'''
hook_source = '''
let g:eft_ignorecase = v:true
'''

[[plugins]]
repo = 'machakann/vim-sandwich'
on_map = { nxo = '<Plug>(sandwich-'}
hook_add = '''
let g:sandwich_no_default_key_mappings = 1

" add
nmap sa <Plug>(sandwich-add)
xmap sa <Plug>(sandwich-add)
omap sa <Plug>(sandwich-add)

" delete
nmap sd <Plug>(sandwich-delete)
xmap sd <Plug>(sandwich-delete)
nmap sdb <Plug>(sandwich-delete-auto)

" replace
nmap sr <Plug>(sandwich-replace)
xmap sr <Plug>(sandwich-replace)
nmap srb <Plug>(sandwich-replace-auto)
'''

[[plugins]]
repo = 'lambdalisue/gina.vim'
on_cmd = 'Gina'
hook_add = '''
nnoremap [gina] <Nop>
nmap <Space>g [gina]
nnoremap [gina]s <Cmd>Gina status<CR>
nnoremap [gina]c <Cmd>Gina commit<CR>
nnoremap [gina]l <Cmd>Gina log<CR>
nnoremap [gina]b <Cmd>Gina blame<CR>
nnoremap [gina]d <Cmd>Gina patch<CR>
nnoremap [gina]ps <Cmd>Deol git push -split=floating -winheight=30 -winwidth=120 -toggle<CR>
nnoremap [gina]pl <Cmd>Deol git pull -split=floating -winheight=30 -winwidth=120 -toggle<CR>
'''
hook_source = '''
call gina#custom#command#option('status', '-s')
call gina#custom#command#option('status', '--opener', 'split')
call gina#custom#command#option('commit', '-v')
call gina#custom#command#option('log', '--opener', 'vsplit')
call gina#custom#command#option('log', '--graph')
call gina#custom#command#option('log', '--all')
call gina#custom#command#option('blame', '--opener', 'tabedit')
call gina#custom#command#option('patch', '--oneside')
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
on_cmd = 'QuickRun'

[[plugins]]
repo = 'tweekmonster/helpful.vim'
on_cmd = 'HelpfulVersion'

# plugins depends for denops {{{
[[plugins]]
repo = 'vim-denops/denops.vim'
hook_add = '''
let g:denops_server_addr = '127.0.0.1:32123'
'''

[[plugins]]
repo = 'vim-skk/skkeleton'
depends = ['denops.vim']
on_map = {ic = '<Plug>(skkeleton-toggle)'}
hook_add = '''
imap <C-j> <Plug>(skkeleton-toggle)
cmap <C-j> <Plug>(skkeleton-toggle)
'''
hook_source = '''
source ~/dotfiles/.vim/plugins/skkeleton.vim
'''

[[plugins]]
repo = 'yasunori-kirin0418/lightline_skk.vim'
on_source = 'skkeleton'
hook_source = '''
call lightline_skk#option('display', {
\ 'hiragana': 'あぁ﫦',
\ 'katakana': 'アァ﫦',
\ 'hankaku-katakana': 'ｱｧ﫦',
\ 'zenkaku-alphabet': 'Ａａ﫦',
\ 'alphabet': 'Aa﫦',
\ })
'''

[[plugins]] # Translate, Japanese to English
repo = 'skanehira/denops-translate.vim'
depends = ['denops.vim']
on_cmd = 'Translate'
hook_add = '''
nnoremap [trans] <Nop>
nmap <Space>l [trans]
nnoremap [trans]e <Cmd>Translate<CR>
nnoremap [trans]j <Cmd>Translate!<CR>
'''

[[plugins]]
repo = 'skanehira/denops-silicon.vim'
depends = ['denops.vim']
on_cmd = 'Silicon'
hook_source = '''
let g:silicon_options = {
  \ 'font': 'Cica',
  \  'no_line_number': v:false,
  \  'no_round_corner': v:false,
  \  'no_window_controls': v:true,
  \  'background_color': '#434C5E',
  \  'line_offset': 1,
  \  'line_pad': 2,
  \  'pad_horiz': 80,
  \  'pad_vert': 100,
  \  'shadow_blur_radius': 10,
  \  'shadow_color': '#2E3440',
  \  'shadow_offset_x': 5,
  \  'shadow_offset_y': 5,
  \  'tab_width': &tabstop,
  \  'theme': 'Nord',
  \ }
'''
# }}}

# filetype plugin {{{
[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'css', 'php']
hook_add = '''
source ~/dotfiles/.vim/plugins/emmet.vim
'''

[[plugins]]
repo = 'elzr/vim-json'
on_ft = 'json'
hook_source = '''
augroup json_autocmd
  autocmd!
  autocmd FileType json setlocal autoindent
  autocmd FileType json setlocal formatoptions=tcq2l
  autocmd FileType json setlocal textwidth=78 shiftwidth=2
  autocmd FileType json setlocal softtabstop=2 tabstop=2
  autocmd FileType json setlocal expandtab
  autocmd FileType json setlocal foldmethod=syntax
augroup END
'''

# Markdown plugins {{{

[[plugins]]
repo = 'mattn/vim-maketable'
on_ft = 'markdown'

[[plugins]]
repo = 'previm/previm'
depends = 'open-browser.vim'
on_ft = 'markdown'
on_cmd = 'PrevimOpen'
hook_add = '''
nnoremap [previm] <Nop>
nmap <Space>p [previm]
nnoremap [previm]o <Cmd>PrevimOpen<CR>
nnoremap [previm]r <Cmd>call previm#refresh()<CR>
'''
hook_source = '''
let g:previm_enable_realtime = 1
let g:previm_disable_default_css = 1
let g:previm_custom_css_path = expand('~/dotfiles/tmp/previm_markdown.css')
let g:previm_plantuml_imageprefix = 'http://localhost:58080/png/'
'''

[[plugins]]
repo = 'tyru/open-browser.vim'
hook_add = '''
" open-browser.vim
let g:netrw_nogx = 1 " disable netrw's gx mapping.
nmap gx <Plug>(openbrowser-smart-search)
vmap gx <Plug>(openbrowser-smart-search)
'''
# }}}

# }}}

# LSP relative plugins {{{
# [[plugins]]
# repo = 'neovim/nvim-lspconfig'
# depends = ['impatient.nvim', 'ddc.vim']
# on_ft = ['python']
# hook_source = '''
# lua << EOF
# require('lspconfig').pyright.setup{}
# EOF
# '''

# [[plugins]]
# repo = 'Shougo/ddc-nvim-lsp'
# on_source = 'nvim-lspconfig'

# [[plugins]]
# repo = 'matsui54/ddc-nvim-lsp-doc'
# on_source = 'ddc-nvim-lsp'

[[plugins]]
repo = 'prabirshrestha/vim-lsp'

[[plugins]]
repo = 'tsuyoshicho/vim-efm-langserver-settings'
depends = ['vim-lsp']

[[plugins]]
repo = 'mattn/vim-lsp-settings'
depends = ['vim-efm-langserver-settings']
on_ft = ['python', 'markdown', 'php', 'vim', 'lua']
hook_source = '''
  source ~/dotfiles/.vim/plugins/lsp.vim
'''

[[plugins]]
repo = 'shun/ddc-vim-lsp'
on_source = ['ddc.vim']

[[plugins]]
repo = 'halkn/lightline-lsp'
on_source = ['vim-lsp']

# }}}
