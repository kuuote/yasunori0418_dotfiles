
# Color scheme {{{
[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
hook_post_update = '''
TSUpdate
'''
lua_source = '''
require('nvim-treesitter.configs').setup {
  ensure_installed = 'all',
  highlight = {
    enable = true,
    disable = { 'swift' },
  },
  indent = {
    enable = true,
  },
}
'''

[[plugins]]
repo = 'nvim-treesitter/playground'
depends = 'nvim-treesitter'
on_cmd = 'TSPlaygroundToggle'
lua_source = '''
require('nvim-treesitter.configs').setup {
  playground = {
    enable = true,
    disable = {},
    updatetime = 25,
    persist_queries = true,
    keybindings = {
      toggle_query_editor = 'o',
      toggle_hl_groups = 'i',
      toggle_injected_languages = 't',
      toggle_anonymous_nodes = 'a',
      toggle_language_display = 'I',
      focus_language = 'f',
      unfocus_language = 'F',
      update = 'R',
      goto_node = '<CR>',
      show_help = '?',
    },
  }
}
'''

[[plugins]]
repo = 'EdenEast/nightfox.nvim'
depends = ['nvim-treesitter']
lua_source = '''
local nightfox = require("nightfox")

nightfox.setup({
  options = {
    -- Compiled file's destination location
    compile_path = vim.fn.stdpath("cache") .. "/nightfox",
    compile_file_suffix = "_compiled", -- Compiled file suffix
    transparent = false,    -- Disable setting background
    terminal_colors = false, -- Set terminal colors (vim.g.terminal_color_*)
    dim_inactive = true,   -- Non focused panes set to alternative background
    styles = {              -- Style to be applied to different syntax groups
      comments = "italic",
      functions = "bold",
      keywords = "NONE",
      numbers = "NONE",
      strings = "NONE",
      types = "NONE",
      variables = "NONE",
      },
    inverse = {             -- Inverse highlight for different types
      match_paren = false,
      visual = true,
      search = false,
      },
    modules = {             -- List of various plugins and additional options
      },
    },
  })
'''
hook_source = '''
" Load the configuration set above and apply the colorscheme
colorscheme nordfox
'''
hook_post_source = '''
if isdirectory(expand('~/.cache/nvim/nightfox'))
  if !exists(system('ls ~/.cache/nvim/nightfox'))
    NightfoxCompile
  endif
else
  NightfoxCompile
endif
'''

# }}}

# lightline {{{

[[plugins]] # Modern and light status line.
repo = 'itchyny/lightline.vim'
on_event = ['CursorHold', 'CursorMoved', 'InsertEnter', 'CmdlineEnter']
depends = ['vim-gitbranch', 'nightfox.nvim']
hook_source = '''
set noshowmode
set showtabline=2
set laststatus=3
let g:lightline = {}

" Colorscheme{{{

let g:lightline.colorscheme = 'nordfox'

" }}}

" Statusline{{{

" active
let g:lightline.active = {}
let g:lightline.active.left = [
  \ ['mode', 'paste', 'skk_mode'], 
  \ ['git_branch', 'relativepath', 'modified'],
  \ ]
let g:lightline.active.right = [
  \ ['percent', 'lineinfo'],
  \ ['fileformat', 'fileencoding', 'filetype'],
  \ ]

" inactive
let g:lightline.inactive = {}
let g:lightline.inactive.left = [
  \ ['filename']
  \ ]
let g:lightline.inactive.right = [
  \ ['lineinfo'],
  \ ['percent'],
  \ ]

" }}}

" Tabline{{{

let g:lightline.tabline = {}
let g:lightline.tabline.left = [
  \ ['tabs'],
  \ ]
let g:lightline.tabline.right = [
  \ ['lsp_errors', 'lsp_warnings', 'lsp_ok'],
  \ ]

let g:lightline.tab = {}
let g:lightline.tab.active = ['tabnum', 'filename', 'modified']
let g:lightline.tab.inactive = ['tabnum', 'filename']

" }}}

" Separator{{{

if &ambiwidth =~# 'single'

  let g:lightline.separator = {
    \ 'left': ' ',
    \ 'right': ' ',
    \ }

  let g:lightline.subseparator = {
    \ 'left': ' ',
    \ 'right': ' ',
    \ }

else

  let g:lightline.separator = {
    \ 'left': '',
    \ 'right': '',
    \ }

  let g:lightline.subseparator = {
    \ 'left': '',
    \ 'right': '',
    \ }

endif

" }}}

" Component_function{{{

let g:lightline.component_function = {
  \ 'git_branch': 'g:LightlineGitBranch',
  \ 'mode': 'g:LightlineMode',
  \ 'skk_mode': 'lightline_skk#mode',
  \ }

" }}}

" Component_expand{{{

let g:lightline.component_expand = {
  \ 'lsp_ok': 'lightline_lsp#ok',
  \ 'lsp_errors': 'lightline_lsp#errors',
  \ 'lsp_warnings': 'lightline_lsp#warnings',
  \ }

" }}}

" Component_expand_type{{{

let g:lightline.component_expand_type = {
  \ 'lsp_ok': 'middle',
  \ 'lsp_errors': 'error',
  \ 'lsp_warnings': 'warning',
  \ }

" }}}

" LightlineUpdate_Command{{{

command! -bar LightlineUpdate source ~/dotfiles/.vim/plugins/lightline.vim|
  \ call lightline#init()|
  \ call lightline#colorscheme()|
  \ call lightline#update()

" }}}

" Custom Lightline mode{{{

function! g:LightlineMode() abort

  if lightline#mode() ==# 'INSERT' || lightline#mode() ==# 'COMMAND' || lightline#mode() ==# 'REPLACE'
    if get(g:, 'loaded_skkeleton') == 0
      return lightline#mode()
    endif

    if skkeleton#mode() !=# ''
      return lightline#mode() . '-SKK'
    else
      return lightline#mode()
    endif
  else
    return lightline#mode()
  endif

endfunction

" }}}

" git branch {{{

function! g:LightlineGitBranch() abort
  if gitbranch#name() ==# ''
    return ''
  else
    if &ambiwidth =~# 'single'
      return ' ' . gitbranch#name()
    else
      return '' . gitbranch#name()
    endif
  endif
endfunction

" }}}
'''

# }}}

# Editor support plugins {{{

[[plugins]]
repo = 'Shougo/context_filetype.vim'
on_source = 'nightfox.nvim'
hook_source = '''
let g:context_filetype#ignore_patterns = {
  \ 'toml': ['^\s*#\s*'],
  \ }
'''

[[plugins]]
repo = 'rcarriga/nvim-notify'
on_source = 'nightfox.nvim'
lua_source = '''
require('notify').setup({
  stages = 'slide',
 background_color = 'NormalFloat',
})
vim.notify = require('notify')
'''

[[plugins]]
repo = 'lambdalisue/suda.vim'
on_cmd = ['SudaRead', 'SudaWrite']

[[plugins]]
repo = 'thinca/vim-quickrun'
on_cmd = 'QuickRun'

[[plugins]]
repo = 'tweekmonster/helpful.vim'
on_cmd = 'HelpfulVersion'

[[plugins]]
repo = '4513ECHO/vim-readme-viewer'
on_cmd = 'DeinReadme'
on_source = 'ddu.vim'
hook_add = '''
let g:readme_viewer#plugin_manager = 'dein.vim'
'''

[[plugins]]
repo = 'turbio/bracey.vim'
on_cmd = 'Bracey'

# }}}

# Deol {{{
[[plugins]]
repo = 'Shougo/deol.nvim'
on_cmd = 'Deol'
hook_add = '''
nnoremap [term] <Nop>
nmap <Space>t [term]
nnoremap [term]a <Cmd>Deol
  \ -no-auto-cd
  \ -no-start-insert
  \ -split=floating
  \ -winheight=30
  \ -winwidth=120
  \ -toggle<CR>
nnoremap [term]t <Cmd>tabnew<Bar>Deol -no-start-insert<CR>
nnoremap [term]c <Cmd>execute 'Deol'
  \ '-cwd=' . fnamemodify(expand('%'), ':h')
  \ '-no-auto-cd'
  \ '-no-start-insert'
  \ '-split=floating'
  \ '-winheight=30'
  \ '-winwidth=120'
  \ '-toggle'<CR>
nnoremap [term]h <Cmd>Deol
  \ -cwd=~
  \ -no-start-insert
  \ -split=floating
  \ -winheight=30
  \ -winwidth=120
  \ -toggle<CR>

" Escape deol
tnoremap <Esc> <C-\><C-n>
'''
hook_source = '''
" let g:deol#prompt_pattern = '^❯ \?'
" let g:deol#enable_ddc_completion = v:true
let g:deol#shell_history_path = '~/.zsh_history'
let g:deol#enable_dir_changed = v:false
let g:deol#nvim_server = '~/.cache/nvim/server.pipe'
'''

# }}}

# Coding support plugins {{{

[[plugins]]
repo = 'cohama/lexima.vim'
on_event = 'InsertEnter'
hook_add = '''
let g:lexima_ctrlh_as_backspace = 1
'''

[[plugins]]
repo = 'hrsh7th/vim-eft'
on_map = { nxo = '<Plug>(eft-' }
hook_add = '''
nmap f <Plug>(eft-f-repeatable)
xmap f <Plug>(eft-f-repeatable)
omap f <Plug>(eft-f-repeatable)
nmap F <Plug>(eft-F-repeatable)
xmap F <Plug>(eft-F-repeatable)
omap F <Plug>(eft-F-repeatable)
'''
hook_source = '''
let g:eft_ignorecase = v:true
'''

[[plugins]]
repo = 'itchyny/vim-cursorword'
on_source = 'nightfox.nvim'

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
on_source = 'nightfox.nvim'
hook_source = '''
let g:indent_guides_default_mapping = 0
let g:indent_guides_exclude_filetypes = ['help', 'ddu-ff-filter', 'ddu-ff', 'ddu-filer', 'deol']
'''
hook_post_source = '''
IndentGuidesEnable
'''

[[plugins]]
repo = 'monkoose/matchparen.nvim'
on_source = 'nightfox.nvim'
lua_source = '''
require('matchparen').setup()
'''
hook_post_source = '''
MatchParenEnable
'''

[[plugins]]
repo = 'machakann/vim-sandwich'
on_map = { nxo = '<Plug>(sandwich-'}
hook_add = '''
let g:sandwich_no_default_key_mappings = 1

" add
nmap sa <Plug>(sandwich-add)
xmap sa <Plug>(sandwich-add)
omap sa <Plug>(sandwich-add)

" delete
nmap sd <Plug>(sandwich-delete)
xmap sd <Plug>(sandwich-delete)
nmap sdb <Plug>(sandwich-delete-auto)

" replace
nmap sr <Plug>(sandwich-replace)
xmap sr <Plug>(sandwich-replace)
nmap srb <Plug>(sandwich-replace-auto)
'''

# }}}

# Git plugins {{{
[[plugins]]
repo = 'itchyny/vim-gitbranch'

[[plugins]]
repo = 'airblade/vim-gitgutter'
on_source = 'nightfox.nvim'

[[plugins]]
repo = 'lambdalisue/gina.vim'
on_cmd = 'Gina'
hook_add = '''
nnoremap [gina] <Nop>
nmap <Space>g [gina]
nnoremap [gina]s <Cmd>Gina status<CR>
nnoremap [gina]c <Cmd>Gina commit<CR>
nnoremap [gina]l <Cmd>Gina log<CR>
nnoremap [gina]b <Cmd>Gina blame<CR>
nnoremap [gina]d <Cmd>Gina patch<CR>
nnoremap [gina]ps <Cmd>Deol git push -split=floating -winheight=30 -winwidth=120 -toggle<CR>
nnoremap [gina]pl <Cmd>Deol git pull -split=floating -winheight=30 -winwidth=120 -toggle<CR>
'''
hook_source = '''
call gina#custom#command#option('status', '-s')
call gina#custom#command#option('status', '--opener', 'split')
call gina#custom#command#option('commit', '-v')
call gina#custom#command#option('log', '--opener', 'vsplit')
call gina#custom#command#option('log', '--graph')
call gina#custom#command#option('log', '--all')
call gina#custom#command#option('blame', '--opener', 'tabedit')
call gina#custom#command#option('patch', '--oneside')
'''

# }}}

# denops plugins {{{
[[plugins]]
repo = 'vim-denops/denops.vim'
hook_add = '''
let g:denops_server_addr = '127.0.0.1:32123'
'''

[[plugins]]
repo = 'vim-skk/skkeleton'
depends = 'denops.vim'
on_map = {ic = '<Plug>(skkeleton-toggle)'}
hook_add = '''
imap <C-j> <Plug>(skkeleton-toggle)
cmap <C-j> <Plug>(skkeleton-toggle)
'''
hook_source = '''
" skkeleton default settings {{{
function! s:skkeleton_init() abort
  call skkeleton#config({
    \ 'eggLikeNewline': v:true,
    \ 'userJisyo': '~/.cache/nvim/skkeleton'
    \ })

  call skkeleton#register_kanatable('rom', {
    \ 'jj': 'escape',
    \ "z\<Space>": ["\u3000", ''],
    \ '~': ['～', ''],
    \ 'z0': ["\u25CB", ''],
    \ })

  call s:L2X_Keymap()

endfunction

function! s:skkeleton_pre() abort
  " Overwrite sources
  let s:prev_buffer_config = ddc#custom#get_buffer()
  call ddc#custom#patch_buffer('sources', ['skkeleton'])
endfunction

function! s:skkeleton_post() abort
  " Restore sources
  call ddc#custom#set_buffer(s:prev_buffer_config)
endfunction
" }}}

" L2X keymap settings {{{
function! s:L2X_Keymap() abort
  call skkeleton#register_kanatable('rom', s:L2X_table())

  call skkeleton#register_keymap('input', 'x', 'disable')
  call skkeleton#register_keymap('input', 'X', 'zenkaku')
endfunction

function! s:L2X_table() abort

  let s:rom_table = {}

  let s:disable_l_nexts = split('bcdfghjkmnpqrsvxzBCDFGHJKMNPQRSVXZ,./1234567890-+=`~;:[]{}()<>!@#$%^&*_\"', '\zs')
  call add(s:disable_l_nexts, "'")
  call map(s:disable_l_nexts, {_, val -> 'l' . val})

  for s:disable_l_next in s:disable_l_nexts
    let s:rom_table[s:disable_l_next] = ['', '']
  endfor

  let s:enable_l_converts = {
    \ 'la': ['ぁ', ''],
    \ 'li': ['ぃ', ''],
    \ 'lu': ['ぅ', ''],
    \ 'le': ['ぇ', ''],
    \ 'lo': ['ぉ', ''],
    \ 'll': ['っ', 'l'],
    \ 'ltu': ['っ', ''],
    \ 'ltsu': ['っ', ''],
    \ 'lwa': ['ゎ', ''],
    \ 'lwe': ['ゑ', ''],
    \ 'lwi': ['ゐ', ''],
    \ 'lya': ['ゃ', ''],
    \ 'lyo': ['ょ', ''],
    \ 'lyu': ['ゅ', ''],
    \ }

  for s:item in items(s:enable_l_converts)
    let s:rom_table[s:item[0]] = s:item[1]
  endfor

  let s:disable_x_converts = {
    \ 'xa': ['', ''],
    \ 'xi': ['', ''],
    \ 'xu': ['', ''],
    \ 'xe': ['', ''],
    \ 'xo': ['', ''],
    \ 'xx': ['', ''],
    \ 'xtu': ['', ''],
    \ 'xtsu': ['', ''],
    \ 'xwa': ['', ''],
    \ 'xwe': ['', ''],
    \ 'xwi': ['', ''],
    \ 'xya': ['', ''],
    \ 'xyo': ['', ''],
    \ 'xyu': ['', ''],
    \ }

  for s:item in items(s:disable_x_converts)
    let s:rom_table[s:item[0]] = s:item[1]
  endfor

  return s:rom_table

endfunction
"}}}

augroup skkeleton_autocmds
  autocmd!
  autocmd User skkeleton-initialize-pre call s:skkeleton_init()
  autocmd User skkeleton-enable-pre call s:skkeleton_pre()
  autocmd User skkeleton-disable-pre call s:skkeleton_post()
  autocmd InsertLeave * mode
augroup END
'''

[[plugins]]
repo = 'yasunori-kirin0418/lightline_skk.vim'
on_source = 'skkeleton'
hook_source = '''
call lightline_skk#option('display', {
\ 'hiragana': 'あぁ﫦',
\ 'katakana': 'アァ﫦',
\ 'hankaku-katakana': 'ｱｧ﫦',
\ 'zenkaku-alphabet': 'Ａａ﫦',
\ 'alphabet': 'Aa﫦',
\ })
'''

[[plugins]] # Translate, Japanese to English
repo = 'skanehira/denops-translate.vim'
depends = 'denops.vim'
on_cmd = 'Translate'
hook_add = '''
nnoremap [trans] <Nop>
nmap <Space>l [trans]
nnoremap [trans]e <Cmd>Translate<CR>
nnoremap [trans]j <Cmd>Translate!<CR>
'''

[[plugins]]
repo = 'skanehira/denops-silicon.vim'
depends = 'denops.vim'
on_cmd = 'Silicon'
hook_source = '''
let g:silicon_options = {
  \ 'font': 'Cica',
  \ 'no_line_number': v:false,
  \ 'no_round_corner': v:false,
  \ 'no_window_controls': v:true,
  \ 'background_color': '#434C5E',
  \ 'line_offset': 1,
  \ 'line_pad': 2,
  \ 'pad_horiz': 80,
  \ 'pad_vert': 100,
  \ 'shadow_blur_radius': 20,
  \ 'shadow_color': '#2E3440',
  \ 'shadow_offset_x': 10,
  \ 'shadow_offset_y': 10,
  \ 'tab_width': &tabstop,
  \ 'theme': 'Nord',
  \ }
'''
# }}}

# filetype plugins {{{

# emmet settings {{{
[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'css', 'php']
hook_add = '''
let g:user_emmet_install_global = 0
autocmd FileType html,css,php EmmetInstall
let g:user_emmet_settings = {
  \ 'variables': {
    \ 'lang': "ja"
    \ },
  \ 'html': {
    \ 'snippets': {
      \ 'html:5': "<!DOCTYPE html>\n"
      \ ."<html lang=\"${lang}\">\n"
      \ ."\t<head>\n"
      \ ."\t\t<meta charset=\"${charset}\">\n"
      \ ."\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n"
      \ ."\t\t<meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n"
      \ ."\t\t<title></title>\n"
      \ ."\t\t<link rel=\"stylesheet\" href=\"css/style.css\">\n"
      \ ."\t</head>\n"
      \ ."\t<body>\n\t${child}|\n\t</body>\n"
      \ ."</html>",
      \ 'lrl:s': "{{ | }}",
      \ 'lrl:e': "{!! | !!}",
      \ }
    \ },
    \ 'php': {
      \ 'snippets': {
        \ 'php:s': "<?php | ?>",
        \ 'php:e': "<?= | ?>",
        \ 'lrl:s': "{{ | }}",
        \ 'lrl:e': "{!! | !!}",
        \ }
      \ }
  \ }
'''
# }}}

[[plugins]]
repo = 'elzr/vim-json'
on_ft = 'json'
hook_source = '''
augroup json_autocmd
  autocmd!
  autocmd FileType json setlocal autoindent
  autocmd FileType json setlocal formatoptions=tcq2l
  autocmd FileType json setlocal textwidth=78 shiftwidth=2
  autocmd FileType json setlocal softtabstop=2 tabstop=2
  autocmd FileType json setlocal expandtab
  autocmd FileType json setlocal foldmethod=syntax
augroup END
'''

# Markdown plugins {{{

[[plugins]]
repo = 'mattn/vim-maketable'
on_ft = 'markdown'

[[plugins]]
repo = 'previm/previm'
depends = 'open-browser.vim'
on_ft = 'markdown'
on_cmd = 'PrevimOpen'
hook_add = '''
nnoremap [previm] <Nop>
nmap <Space>p [previm]
nnoremap [previm]o <Cmd>PrevimOpen<CR>
nnoremap [previm]r <Cmd>call previm#refresh()<CR>
'''
hook_source = '''
let g:previm_enable_realtime = 1
let g:previm_disable_default_css = 1
let g:previm_custom_css_path = expand('~/dotfiles/tmp/previm_markdown.css')
let g:previm_plantuml_imageprefix = 'http://localhost:58080/png/'
'''

[[plugins]]
repo = 'tyru/open-browser.vim'
hook_add = '''
" open-browser.vim
let g:netrw_nogx = 1 " disable netrw's gx mapping.
nmap gx <Plug>(openbrowser-smart-search)
vmap gx <Plug>(openbrowser-smart-search)
'''
# }}}

# }}}

# LSP plugins {{{
# [[plugins]]
# repo = 'neovim/nvim-lspconfig'
# depends = ['impatient.nvim', 'ddc.vim']
# on_ft = ['python']
# hook_source = '''
# lua << EOF
# require('lspconfig').pyright.setup{}
# EOF
# '''

# [[plugins]]
# repo = 'Shougo/ddc-nvim-lsp'
# on_source = 'nvim-lspconfig'

# [[plugins]]
# repo = 'matsui54/ddc-nvim-lsp-doc'
# on_source = 'ddc-nvim-lsp'

[[plugins]]
repo = 'prabirshrestha/vim-lsp'

[[plugins]]
repo = 'tsuyoshicho/vim-efm-langserver-settings'
depends = ['vim-lsp']

[[plugins]]
repo = 'mattn/vim-lsp-settings'
depends = ['vim-efm-langserver-settings']
on_ft = ['python', 'markdown', 'php', 'vim', 'lua']
hook_source = '''
" Performance improvements using lua.
let g:lsp_use_lua = v:true

" enable signs
let g:lsp_signs_enabled = 1

" Not use virtual text.
"let g:lsp_diagnostics_virtual_text_enabled = 0

" Use echo from cmdline.
let g:lsp_diagnostics_echo_cursor = 1

" diagnostics signs
"let g:lsp_diagnostics_signs_error = {'text': '✗'}
"let g:lsp_diagnostics_signs_warning = {'text': ''}
"let g:lsp_diagnostics_signs_information = {'text': ''}
"let g:lsp_diagnostics_signs_hint = {'text': ''}

" Document code action sign.
"let g:lsp_document_code_action_signs_hint = {'text': ''}

"let g:lsp_diagnostics_virtual_text_prefix = ''
"let g:lsp_tree_incoming_prefix = ''

" output lsp log file
let g:lsp_log_verbose = 0
"let g:lsp_log_file = expand('~/vim-lsp.log')

" efm-langserver settings {{{

" https://github.com/nakatanakatana/dotfiles
" for efm-langserver-settings
let s:efm_args = []
if efm_langserver_settings#config_enable()
  let s:efm_args = extend(s:efm_args, ['-c', efm_langserver_settings#config_path()])
endif

"let g:efm_langserver_settings#debug = 5

if efm_langserver_settings#debug_enable()
  let s:efm_args = extend(s:efm_args, ['-logfile', efm_langserver_settings#debug_path()])
  let s:efm_args = extend(s:efm_args, ['-loglevel', efm_langserver_settings#debug_enable()])
endif

let g:lsp_settings = {
  \ 'efm-langserver': {
    \ 'disabled': v:false,
    \ 'args': s:efm_args,
    \ 'allowlist': efm_langserver_settings#whitelist(),
    \ 'blocklist': efm_langserver_settings#blacklist(),
    \ }
  \ }

" }}}

" Not show install server suggestion message.
let g:lsp_settings_enable_suggestions = 0
'''

[[plugins]]
repo = 'shun/ddc-vim-lsp'
on_source = ['ddc.vim']

[[plugins]]
repo = 'halkn/lightline-lsp'
on_source = ['vim-lsp']

# }}}
