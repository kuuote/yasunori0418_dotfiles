*gina.txt*		Vimからgitリポジトリを非同期的に制御します

Version: 1.0
Author:  Alisue <lambdalisue@hashnote.net>
License: MIT License (See LICENSE)


=============================================================================
CONTENTS					*gina-contents*

INTRODUCTION			|gina-introduction|
USAGE				|gina-usage|
  COMMAND			  |gina-usage-command|
  ACTION			  |gina-usage-action|
  COMPONENT			  |gina-usage-component|
CUSTOM				|gina-custom|
  ACTION			  |gina-custom-action|
  MAPPING			  |gina-custom-mapping|
  COMMAND			  |gina-custom-command|
  EXECUTE			  |gina-custom-execute|
  EXAMPLE			  |gina-custom-example|
BUFFER				|gina-buffer|
  BLAME				  |gina-buffer-blame|
  BRANCH			  |gina-buffer-branch|
  CHANGES			  |gina-buffer-changes|
  COMMIT			  |gina-buffer-commit|
  DIFF				  |gina-buffer-diff|
  GREP				  |gina-buffer-grep|
  LOG				  |gina-buffer-log|
  LS				  |gina-buffer-ls|
  REFLOG			  |gina-buffer-reflog|
  SHOW				  |gina-buffer-show|
  STASH				  |gina-buffer-stash|
  STASH	SHOW			  |gina-buffer-stash-show|
  STATUS			  |gina-buffer-status|
  TAG				  |gina-buffer-tag|
INTERFACE			|gina-interface|
  COMMANDS			  |gina-commands|
  FUNCTIONS			  |gina-functions|
  VARIABLES			  |gina-variables|
  HIGHLIGHTS			  |gina-highlights|
  OPTIONS			  |gina-options|
  ACTIONS			  |gina-actions|
MISC				|gina-misc|
  SHORT FORMAT			  |gina-misc-short-format|
  TREEISH			  |gina-misc-treeish|
  STRING FORMAT			  |gina-misc-string-format|
  ASKPASS     			  |gina-misc-askpass|
CHANGELOG			|gina-changelog|


=============================================================================
INTRODUCTION					*gina-introduction*

*gina.vim* (gina)は、gitリポジトリを非同期的に制御するためのプラグインです。

- gitコマンドを非同期で実行します (|job|)
- gitコマンドの結果の候補を一覧表示します
- gitリポジトリを制御するために、上記の候補に対してアクションを実行します

Latest version:~
https://github.com/lambdalisue/gina.vim


=============================================================================
USAGE						*gina-usage*

以下は、Ginaを使用した一般的な作業フローの概略図です。
>
           ┌─────┬──────────┐
	   │     │          │
	#DIRTY#  │          ▼
	   ▲     │    :Gina status  │ <<  : stage
	   │     │          │       │ >>  : unstage
	   │     │          │       │ --  : toggle
	:write   │       #STAGED#   │ ==  : discard
	   ▲     │          │       │ pp  : patch
	   │     ├──────────┤       │ dd  : diff
	   │     │          ▼   
	#CLEAN#  │     :Gina commit │ !   : switch --amend
	   │     │          │       │ :w  : save cache
	   │     ▼          │       │ :q  : commit changes (confirm)
	   └────────────────┘       │ :wq : commit changes (immediate)
<
したがって、基本的にユーザーは

1. gitリポジトリのコンテンツを編集します
2. Stage changes with |:Gina-status|
2. ステージは|:Gina-status| で変更されます
   - "<<" ステージング
   - ">>" アンステージング
   - etc.
3. |:Gina-commit| を使用して変更をコミットします
   - |:w| メッセージをキャッシュに保存する
   - |:q| 変更をコミットする（ユーザーは必要に応じて尋ねられます）
   - |:wq| 変更をコミットする（すぐにコミットが実行されます）

Ginaのより基本的なことを学ぶためにさらに読んでください。

-----------------------------------------------------------------------------
COMMAND						*gina-usage-command*

ginaは単一のコマンドを提供します|:Gina| これは少なくとも1つの引数を取ります。

|:Gina| が|bang| 修飾子(||Gina!|)で実行されると、
対応するgitコマンドを非同期で実行し、結果をエコーします。
たとえば、ユーザーが":Gina! status"を実行すると、
次のようなgitリポジトリの現在のステータスがエコーされます。
>
	:Gina! status
	[gina] On branch master
	[gina] Your branch is up-to-date with 'origin/master'.
	...
	[gina] 
	[gina] no changes added to commit (use "git add" and/or "git ...
<
|:Gina| がダブル|bang| 修飾子(|:Gina!!|)で実行されると、
|:!| または|:terminal| によってシェルの下で対応するgitコマンドを実行します。
これは主にインタラクティブ機能をサポートするためのものであり、
"git add -p" や"git rebase -i"などのコマンドは非同期で実行されないことに注意してください。

|:Gina| が|bang| 修飾子なしで実行されると、
"gina#command#..."名前空間から対応するginaコマンドを見つけて、実行しようとします。
対応するコマンドが見つからない場合は、上記の動作にフォールバックします。
つまり、非ginaコマンドは生のgitコマンドを実行します。

たとえば、ユーザーが":Gina add"を実行すると、
"add"に対応するginaコマンドが存在しない場合は、":Gina! add"にフォールバックします。
>
	:Gina add
	[gina] Nothing specified, nothing added.
	[gina] Maybe you wanted to say 'git add .'?
<
また、ユーザーが":Gina status"を実行すると、"gina-status"バッファが開き、"status"が"gina#command#..."名前空間にあり、関数が現在のgitリポジトリ"gina-status"バッファを開きます。
>
	:Gina status
	--> Opens a "gina-status" window instead
<
また、バッファ上で、ユーザーは次のセクションで説明する事前定義されたアクションを実行できます。

-----------------------------------------------------------------------------
ACTION						*gina-usage-action*

|:Gina|がファイルではないバッファ("gina-status"バッファなど)を開くと、
ユーザーは、バッファーに表示されている候補に対して事前定義されたアクションを実行できます。

たとえば、":Gina status -s"は、次のような短い形式で"gina-status"バッファを開きます。
>
	M  foo.txt
	 M bar.txt
<
バッファの内容は、各ファイルのインデックスステータスを示します。
最初の行は"foo.txt"がステージングされていることを示し、最後の行は"bar.txt"がステージングされていないことを示しています。

ユーザーが最後の行で"a"を押すと、ユーザーは次のようなプロンプトで実行するアクションを選択するように求められます
>
	action: 
<
だから今、そのプロンプトで"sta"と入力します
>
	action: sta
<
そして今、<Tab>を押すと「ステージ」が完了します。
これは|cmdline-completion| の基本的な動作です。よく知らない場合は、それを読んでください。

次に、<Return>を押してアクションを実行します。
これにより、ユーザーが入力した"stage"にエイリアスされる"index:stage"アクションが実行されます。
そして、バッファの内容は次のようになります
>
	M  foo.txt
	M  bar.txt
<
これは、すべての変更がインデックスにステージングされることを示します。

それでは、"unstage"にエイリアスされた"index：unstage"アクションを使用して"foo.txt"のステージを解除しましょう。
最初の行で"a"を押してプロンプトを開始し、次のように"uns"と入力します。
>
	action: uns
<
そして今回は、<Tab>の代わりに<Return>を押します。
It should execute a "index:unstage" action and the buffer content will become
"index:unstage"アクションを実行する必要があり、バッファの内容は次のようになります。
>
	 M foo.txt
	M  bar.txt
<
アクション名は入力から推測されます。
つまり、競合がない場合、ユーザーは完全なアクション名/エイリアスを入力する必要はありません。

毎回アクション名/エイリアスを入力するのが面倒かもしれません。
幸い、"gina-status"バッファーは、基本的なアクションのデフォルトのマッピングを提供します。
"stage"と"unstage"は"<<"と">>"にマップされるため、候補でこれらのキーを押すと、対応するアクションが実行されます。

さらに、一部のアクションは|visual-mode| で許可されています。
たとえば、すべてのファイルをステージングする場合は、
"ggVG<<"を使用して、バッファにリストされているすべての候補に対して"index:stage"アクションを実行します。

						*gina-usage-action-mark*
一部のバッファ内のアクションは"マーク可能"として定義され、
つまり、ユーザーは"builtin:mark"アクションで候補にマークを付けることができ、
それ以降のすべてのアクションは選択した候補に適用されます(アクションがマークを使用するように定義されている場合のみ)。
デフォルトでは、次のマッピングが提供されます。

	mm		選択範囲をマーク/マーク解除 [nv]
	m+		選択をマークします [nv]
	m-		選択のマークを外します [nv]
	m*		すべてのマークのマークを外します [n]
	<C-j>		下の行に移動して、マーク/マーク解除します [n]
	<C-k>		上の行に移動して、マーク/マーク解除します [n]

ユーザーがアクションを呼び出すと、マークが削除されることに注意してください。

						*gina-usage-action-repeat*
前のアクションを繰り返したい場合があります。その場合、
デフォルト設定で"."にマップされる"builtin:repeat"アクションを使用します。
"builtin:choice"アクションから実行されたアクションが繰り返し可能になることに注意してください。
一部のアクションは繰り返し不可であることに注意してください。ほとんどのアクションは繰り返し可能ですが、
今のところ、アクションが繰り返し可能かどうかを確認する方法はありません。

"gina-status"バッファーは、より多くの事前定義されたアクションとデフォルトのマッピングを提供します。
定義されているアクションとマッピングの種類を確認するには、
"?"で以下のようなヘルプメッセージが表示されます。
>
	       browse    [browse] Bro..... <Plug>(gina-a...)[n]
	...
	a      b..choice [choice] Sel..... <Plug>(gina-a...)[nvi]
	?      b..help   [help]   Sho..... <Plug>(gina-a...)[n]
	...
<
メッセージの各列は

1. アクションに割り当てられたキーマップ(例:?)
2. アクションのフルネーム(例:builtin:help)
3. 完了に使用されるアクションエイリアス(例:[help])
4. アクションの説明
5. カスタマイズ用の<Plug>マッピング(例:<Plug>(gina-action-builtin-help))
6. <Plug>マッピングがサポートするマッピングモード(例:[n])

カスタムエイリアスまたはマッピングを定義する場合は、次のセクションを参照してください。

						*gina-usage-action-mods*
ほとんどのアクションはコマンド修飾子をサポートしています。
たとえば、アクションのデバッグメッセージを表示する場合は、
|verbose|のような修飾子を先頭に追加します。
>
	action: verbose show
<
<CR>を押すと、"show"アクションが|verbose| 修飾子で実行されます。

マークをカスタマイズするために、ユーザーは以下を使用できます

|g:gina#action#mark_sign_text|
|hl-GinaActionMarkSelected|

-----------------------------------------------------------------------------
COMPONENT					*gina-usage-component*

Ginaは、|statusline| や|tabline| のキャッシュされた文字列を返すコンポーネント関数を提供します。

たとえば、ユーザーがgitリポジトリに関する情報を表示したい場合は、
次のコードを使用して、|statusline| に表示できます。
>
	set statusline=...%{gina#component#repo#preset()}...
<
または、ユーザーがASCII以外の文字を使用したい場合は、
次のように、最初の属性に"fancy"を指定します。
>
	set statusline=...%{gina#component#repo#preset('fancy')}...
<
Ginaは、以下のプリセットコンポーネント機能を提供します

	function				description~
	|gina#component#repo#preset()|		一般的な情報。
	|gina#component#status#preset()|	現在のgitステータス。
	|gina#component#traffic#preset()|	トラフィック情報。

ユーザーがコンポーネントの外観を制御したい場合は、
彼らは次のような生のコンポーネント関数を使用できます
>
	set statusline=...%{MyGitStatus()}...

	function MyGitStatus() abort
	  let staged = gina#component#status#staged()
	  let unstaged = gina#component#status#unstaged()
	  let conflicted = gina#component#status#conflicted()
	  return printf(
	        \ 's: %s, u: %s, c: %s',
	        \ staged,
	        \ unstaged,
	        \ conflicted,
	        \)
	endfunction
<
Ginaは以下の生のコンポーネント機能を提供します

	function				description~
	|gina#component#repo#name()|		現在のgitリポジトリの名前。
						つまり、これはgitリポジトリトップのディレクトリ名です。
	|gina#component#repo#branch()|		現在のブランチの名前。
	|gina#component#repo#track()|		現在の追跡ブランチの名前。
	|gina#component#status#staged()|	ステージングされたファイルの数。
	|gina#component#status#unstaged()|	ステージングされていないファイルの数。
	|gina#component#status#conflicted()|	競合するファイルの数。
	|gina#component#traffic#ahead()|	追跡ブランチの前のコミットの数。
	|gina#component#traffic#behind()|	追跡ブランチの背後にあるコミットの数。

Note: パフォーマンスを向上させるために、値がキャッシュされることに注意してください。

こちらも参照してください
|g:gina#component#repo#commit_length|


=============================================================================
CUSTOM						*gina-custom*

ユーザーは以下の機能で動作をカスタマイズできます。

	function			description~
	|gina#custom#action#alias()|	指定されたgina-xxxxxバッファで
					アクションのエイリアスを定義します。
	|gina#custom#action#shorten()|	Alt. to |gina#custom#action#alias()|.
					指定されたアクションスキームからスキー
					ムプレフィックスを削除します。
	
	|gina#custom#mapping#map()|	指定されたgina-xxxxxバッファにカスタム
					マッピングを定義します。
	|gina#custom#mapping#nmap()|	Alt. to |gina#custom#mapping#map()|.
					この関数は内部で|nmap|を使用します。
	|gina#custom#mapping#vmap()|	Alt. to |gina#custom#mapping#map()|.
					この関数は内部で|vmap|を使用します。
	|gina#custom#mapping#imap()|	Alt. to |gina#custom#mapping#map()|.
					この関数は内部で|imap|を使用します。
	
	|gina#custom#command#option()|	指定された：Ginaxxxxxコマンドのデフォ
					ルトオプションを定義します。
	|gina#custom#command#alias()|	指定された：Ginaxxxxxコマンドのコマン
					ドエイリアスを定義します。

	|gina#custom#execute()|		指定されたgina-xxxxxバッファでコマンド
					を実行します。
	
	
これらの関数の最初の引数は、バッファタイプまたはコマンドを示す{scheme}です。

上記の機能に満足できない場合は、
より複雑なカスタマイズを行うには、|after|ディレクトリで|autocmd|、|ftplugin|、
または|ftplugin|を使用します。

-----------------------------------------------------------------------------
ACTION 						*gina-custom-action*

"track"によって追跡状態("commit:checkout:track"アクション)を持つリモート
ブランチをチェックアウトするためのカスタムアクションエイリアスを追加するとします。
この場合、|gina#custom#action#alias()|を使用します"gina-branch"バッファの
カスタムアクションエイリアスを定義する関数
>
	" Alias 'track' to 'commit:checkout:track'
	call gina#custom#action#alias(
	      \ 'branch', 'track', 'commit:checkout:track',
	      \)
<
上記の関数は、「gina-branch」バッファーのアクションにのみ影響します。
エイリアスを複数のバッファに適用する場合は、
{scheme}で"/{pattern}"を使用します。

"dp"によって"previewwindow"で候補のdiffコンテンツを開くためのグローバル
カスタムアクションエイリアスを追加するとします。
|.vimrc|に次のコードを追加します。
>
	" Alias 'dp' to 'diff:preview' globally
	call gina#custom#action#alias(
	      \ '/.*', 'dp', 'diff:preview'
	      \)
<
Note: {scheme}属性の値は"/"で始まることに注意してください。
{scheme}が "/{pattern}"の場合、
先頭に"/"が付いていない値は|pattern|と見なされ、
関数は{pattern}を使用してすべてのバッファに適用されます。

					*gina-custom-action-shorten*
ginaは代替関数を提供します|gina#custom#action#shorten()|これは、
アクションの"short-form"のエイリアスを定義するために使用されます。
たとえば、以下は"status"の短い形式"show"のエイリアスを定義します。
>
	call gina#custom#action#shorten('status', 'show')
<
上記のコードは、次のエイリアスを定義します

	short-form alias	action~
	"show"			"show"
	"split"			"show:split"
	"vsplit"		"show:vsplit"
	"tab"			"show:tab"
	"preview"		"show:preview"

一部のアクションを除外してエイリアスを作成する場合は、
次のように3番目の引数にアクション名を指定します。
>
	call gina#custom#action#shorten(
	      \ 'status',
	      \ 'show',
	      \ ['show:tab', 'show:preview']
	      \)
<
次に、"show:tab"と"show:preview"を除く短い形式のエイリアスが"gina-status"バッファで定義されます。
Note:"/{pattern}"はこの関数でも使用できます。

-----------------------------------------------------------------------------
MAPPING						*gina-custom-mapping*

"<C-^>"によって"gina-status"と"gina-commit"の間で
バッファを切り替えるためのカスタムマッピングを追加するとします。
この場合、|gina#custom#mapping#nmap()|を使用します
"gina-status"および"gina-commit"バッファのカスタムマッピングを定義する関数
>
	" Execute :Gina commit with <C-^> on "gina-status" buffer
	call gina#custom#mapping#nmap(
	      \ 'status', '<C-^>',
	      \ ':<C-u>Gina commit<CR>',
	      \ {'noremap': 1, 'silent': 1},
	      \)

	" Execute :Gina status with <C-^> on "gina-commit" buffer
	call gina#custom#mapping#nmap(
	      \ 'commit', '<C-^>',
	      \ ':<C-u>Gina status<CR>',
	      \ {'noremap': 1, 'silent': 1},
	      \)
<
上記の関数は、"gina-status"および"gina-commit"バッファのマッピングにのみ影響します。
{scheme}で"/{pattern}"を使用して、マッピングを複数のバッファに適用します。

"g <CR>"によって新しいタブページで候補を開くためのグローバルカスタムマッピング
を追加するとします。
|.vimrc|に次のコードを追加します。
>
	" Use g<CR> to open a candidate on a new tabpage
	call gina#custom#mapping#nmap(
	      \ '/.*', 'g<CR>',
	      \ '<Plug>(gina-edit-tab)'
	      \)
<
Note: {scheme}属性の値は"/"で始まることに注意してください。
{scheme}が "/ {pattern}"の場合、
先頭に"/"が付いていない値は、|pattern|と見なされます。
関数は{pattern}を使用してすべてのバッファに適用されます。

<mods>を使用してエイリアスまたはアクションをマッピングするには、|
gina#action#call()|を使用します次のような機能：
>
	" Use <Left> to open a candidate on a leftest
	call gina#custom#mapping#nmap(
	      \ 'status', '<Left>',
	      \ ':call gina#action#call(''show:leftest'')<CR>',
	      \ {'noremap': 1, 'silent': 1},
	      \)

	" Use g<Left> to open a candidate on a leftest with verbose
	call gina#custom#mapping#nmap(
	      \ 'status', 'g<Left>',
	      \ ':call gina#action#call(''verbose show:leftest'')<CR>',
	      \ {'noremap': 1, 'silent': 1},
	      \)
<
-----------------------------------------------------------------------------
COMMAND 					*gina-custom-command*

|vsplit|を使用して常に"gina-log"バッファを開きたいと仮定します。
|:Gina-log|によるデフォルトのオープナーではありません。
この場合、|gina#custom#command#option()|を使用します
"log"コマンドのデフォルトオプションを定義する関数
>
	call gina#custom#command#option('log', '--opener', 'vsplit')
<
次に、対応するオプションが手動で指定されていない場合、
ginaは自動的に"--opener = vsplit"を":Gina log"に追加します
(":Gina log --opener = tabedit"は上記のコードでも機能します)。

関数の2番目の引数は{query}と呼ばれます。
ユーザーは、次のようなバー("|")で区切られた文字列を使用して複数のオプションを指定できます。
>
	call gina#custom#command#option('commit', '-v|--verbose')
<
この場合、オプション"-v"と"--verbose"は同じオプションと見なされます。
ユーザーが":Gina commit"を実行すると、ginaは自動的に"--verbose"オプションを追加しますが、
ユーザーが":Gina commit -v"または":Gina commit --verbose"を実行すると、
ginaは、上記で定義されたデフォルトオプションを無視します。

さらに、オプションが":Gina commit"の"--verbose"のような機能を切り替えるためのものである場合、
ユーザーは、"-no-{option}"のように追加することで
、デフォルトのオプションを削除できます。
>
	call gina#custom#command#option('commit', '-v|--verbose')
	:Gina commit
	" --> Open "gina-commit" with "--verbose" option
	:Gina commit --no-verbose
	" --> Open "gina-commit" without "--verbose" option
<
Note: この"-no-{option}"は、デフォルト値が1に指定されている(または省略されている)
オプションでのみ使用可能であることに注意してください。

ファイルのようなものではないバッファを開くすべてのコマンドに"--opener = vsplit"を追加するとします。
次に、|.vimrc|に次のコードを追加します
>
	" Add "--opener=vsplit" to branch/changes/grep/log
	call gina#custom#command#option(
	      \ '/\%(branch\|changes\|grep\|log\)',
	      \ '--opener', 'vsplit'
	      \)
<
Note: {scheme}属性の値は「/」で始まることに注意してください。
{scheme}が "/{pattern}"の場合、先頭に"/"がない値は|pattern|と見なされます。
関数は{pattern}を使用してすべてのバッファに適用されます。

					*gina-custom-command-alias*
"status"コマンドに"st"を使用するとします。
この場合、|gina#custom#command#alias()|を使用します
"status"コマンドのカスタムコマンドエイリアスを定義する関数
>
	call gina#custom#command#alias('status', 'st')
<
次に、":Gina st"は、":Gina! st"の代わりに":Gina status"を実行します。

コマンドエイリアスには独自のデフォルトオプションスペースがあることを
知っておく価値があります。
|gina#custom#command#option()|によって"status"に割り当てられたデフォルト
オプションを意味します。たとえば、コマンドエイリアス"st"には影響しません
>
	call gina#custom#command#option('status', '--ignore-submodules')
	call gina#custom#command#alias('status', 'st')
	:Gina status
	" --> Open "gina-status" with "--ignore-submodules"
	:Gina st
	" --> Open "gina-status" without "--ignore-submodules"
>
ginaのコマンドではなくgit rawコマンドのコマンドエイリアスを作成する場合は、
次のように3番目の引数に1を割り当てます
>
	call gina#custom#command#alias('status', 'st', 1)
	:Gina st
	[gina] On branch master
	[gina] Your branch is up-to-date with 'origin/master'.
	...
	[gina] 
	[gina] no changes added to commit (use "git add" and/or "git ...
	
Note: この関数では、{scheme}の"/{pattern}"は使用できません。

-----------------------------------------------------------------------------
EXECUTE 					*gina-custom-execute*

これは、|execute|する最も強力なカスタム関数です。
{scheme}バッファ上のarbital {expr}。

ウィンドウの高さを固定するために、"gina-status"バッファに"winfixheight"を設定するとします。
次に、次のコードが役立ちます。
>
	call gina#custom#execute('status', 'setlocal winfixheight')
<
他のカスタム関数と同様に、{scheme}には"/{pattern}"が許可されているため、
次のような複数のバッファで"setlocal winfixwidth"を実行できます。
>
	call gina#custom#execute(
	      \ '/\%(status\|branch\|grep\)',
	      \ 'setlocal winfixheight'
	      \)
<
これは最も強力なカスタム関数なので、細心の注意を払って使用してください。

-----------------------------------------------------------------------------
EXAMPLE 					*gina-custom-example*

以下は、私が今のところginaをカスタマイズするために使用するものです。
>
	call gina#custom#command#alias('branch', 'br')
	call gina#custom#command#option('br', '-v', 'v')
	call gina#custom#command#option(
	      \ '/\%(log\|reflog\)',
	      \ '--opener', 'vsplit'
	      \)
	call gina#custom#command#option(
	      \ 'log', '--group', 'log-viewer'
	      \)
	call gina#custom#command#option(
	      \ 'reflog', '--group', 'reflog-viewer'
	      \)
	call gina#custom#command#option(
	      \ 'commit', '-v|--verbose'
	      \)
	call gina#custom#command#option(
	      \ '/\%(status\|commit\)',
	      \ '-u|--untracked-files'
	      \)
	call gina#custom#command#option(
	      \ '/\%(status\|changes\)',
	      \ '--ignore-submodules'
	      \)
	
	call gina#custom#action#alias(
	      \ 'branch', 'track',
	      \ 'checkout:track'
	      \)
	call gina#custom#action#alias(
	      \ 'branch', 'merge',
	      \ 'commit:merge'
	      \)
	call gina#custom#action#alias(
	      \ 'branch', 'rebase',
	      \ 'commit:rebase'
	      \)
	
	call gina#custom#mapping#nmap(
	      \ 'branch', 'g<CR>',
	      \ '<Plug>(gina-commit-checkout-track)'
	      \)
	call gina#custom#mapping#nmap(
	      \ 'status', '<C-^>',
	      \ ':<C-u>Gina commit<CR>',
	      \ {'noremap': 1, 'silent': 1}
	      \)
	call gina#custom#mapping#nmap(
	      \ 'commit', '<C-^>',
	      \ ':<C-u>Gina status<CR>',
	      \ {'noremap': 1, 'silent': 1}
	      \)
	
	call gina#custom#execute(
	      \ '/\%(status\|branch\|ls\|grep\|changes\|tag\)',
	      \ 'setlocal winfixheight',
	      \)
<
Latest version:~
"home/.config/nvim/rc.d/gina.vim" on https://github.com/lambdalisue/rook/

=============================================================================
BUFFER						*gina-buffer*

ginaは内部で2種類のバッファを使用します。
1つは「ファイルのような」バッファと呼ばれ、
もう1つは「非ファイルのような」バッファと呼ばれます。

「ファイルのような」と「ファイルのようなものではない」の主な違いはオプションです。
一部のオプションはコマンド(上部)によって強制的に割り当てられ、
他のオプションは対応する|ftplugin|(下部)で定義されます。
次の表は、ファイルのようなものとファイルのようなものではない
オプションの違いを視覚化したものです(表の"?"はデフォルト値を示します)

	option			file-like	non file-like~
	'buftype'		nowrite		nofile
	'bufhidden'		?		hide
	'swapfile'		?		0
	'modifiable'		0		0
	
	option			file-like	non file-like~
	'buflisted'		1		0
	'list'			?		0
	'spell'			?		0
	'wrap'			?		0
	'foldenable'		?		0
	'number'		?		0
	'relativenumber'	?		0 
	'foldcolumn'		?		0
	'colorcolumn'		?		0

このオプションに満足できない場合は、
|ftplugin|を使用する上書きする|after|ディレクトリにあります。

追加の違いは|gina-actions|です。
「ファイルではない」バッファのほとんどは、いくつかのアクションを
事前に定義していますが、「ファイルではない」バッファは定義していません。

						*gina-buffer-naming*
ginaで表示されるバッファは次のいずれかです

	gina://{refname}:{scheme}[:{params}]
	gina://{refname}:{scheme}[:{params}]/{rev}
	gina://{refname}:{scheme}[:{params}]/{treeish}

Where
	{refname}	gitリポジトリの一意の名前
			e.g. "gina.vim"
	{scheme}	コマンドスキーム
			e.g. "status", "commit"
	{params}	":"で分割されたオプションのパラメータ
			e.g. "cached", "cached:--"
	{rev}		ターゲットリビジョン
			e.g. "HEAD", "master"
	{treeish}	{rev}:{path}であるターゲットtreeish
			e.g. "HEAD:README.md", ":autoload/gina.vim"

コマンドが"-- {pathspec}..."による候補のフィルタリングをサポートし、
フィルタリングが実行された場合、"--"は次のように{params}に適用されます。
>
	:Gina log
	" --> Open gina://xxxxx:log for entire log
	:Gina log -- **/*.vim
	" --> Open gina://xxxxx:log:-- for filtered log
<
{treeish}は、"git show"コマンドで使用されるものと似ています。
|gina-misc-treeish|を参照してください{treeish}の詳細については

						*gina-buffer-+cmd*
ginaがバッファを開くと、コマンドに指定された[+cmd]が認識され、実行されます。
詳細については、":h+ cmd"を参照してください。

						*gina-buffer-++opt*
ginaによってバッファが開かれると、コマンドに指定された[++opt]が認識され尊重されます。
ユーザーはこの機能を使用して、
次のような特定のエンコーディングまたはフォーマットでバッファを開くことができます。
>
	:Gina show ++enc=sjis ++ff=mac HEAD:README.md
	" --> Open README.md in HEAD with sjis/mac
<
詳細については、":h ++opt"を参照してください。

Note: 'fileencodings'または'fileformats'による自動検出はサポートされていません。
必要に応じてhttps://github.com/lambdalisue/gina.vim/issues/24に賛成してください。

-----------------------------------------------------------------------------
BLAME						*gina-buffer-blame*
					{scheme}:	blame
					'filetype':	gina-blame

これは、|:Gina-blame|コマンドで表示される「ファイルではない」バッファです。
これは、blameナビゲーターが次のように見えるファイルのコンテンツを示しています
(Note: SHA1インジケーターはシェードブロックとして表されますが、実際には色付きの列です)
>
	Navigation buffer                 Content buffer
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~~~
	Add badges o... on yesterday  ░ | ![...](...)
	Add badges o... on yesterday  ░ | ![...](...)
	...
	Initial commit    on 14, Feb    | FOOBAR HOGEHOGE
	Some refactoring    on today |█ | ![...](...)

               │              │      ││
               │              │      │└ SHA1 indicator column(s) (N chars)
               │              │      └ Current revision mark
               │              └ Timestamp (relative or absolute)
               └ Commit summary
<
同じリビジョン(commit)の連続した行は「チャンク」と呼ばれます。
git raw blameコマンドとは異なり、ginaは各チャンク/行のリビジョンを表示しません。
代わりに、ginaはSHA1インジケーター列を使用してリビジョンを区別します。

SHA1インジケーター列は、非難コンテンツの一意のリビジョンを示す色付きの列または色付きの列の組み合わせです。
単一のリビジョンを示すために使用される列の数は、非難の内容に示されているリビジョンの総数から決定されます。
つまり、同じ色の列または同じ色の列の組み合わせは同じリビジョンを示すため、ユーザーはどの行が連続しているか、どのチャンクが等しいかを簡単に区別できます。

チャンクのリビジョンが非難コンテンツのリビジョンと等しい場合、
現在のリビジョンマーク(デフォルトは"|")がSHA1インジケーターのすぐ横に表示されます。
この場合、"blame:open"アクションは、コミット自体ではなく、関連する親コミットが存在する場合にそれを開きます。

ナビゲーションコンテンツは幅に依存します。
"gina-blame"バッファのウィンドウ幅が変更された場合、
コンテンツは次の場合に再描画されます
	
	- Users hit <C-L> (<Plug>(gina-blame-C-L))
	- Focus is moved from/to the buffer (|WinLeave| or |WinEnter|)
	- Vim's window is resized (|VimResized|)

このバッファでは、ユーザーは次のアクショングループを使用できます。

	|gina-actions-blame|	(shorten)
	|gina-actions-browse| 
	|gina-actions-changes|
	|gina-actions-compare|
	|gina-actions-diff|
	|gina-actions-ls|
	|gina-actions-show|
	|gina-actions-yank|

また、<Plug>マッピングに追加される次の<Plug>マッピングは、上記のアクションからのものです。
	
	<Plug>(gina-blame-redraw)	現在の幅でコンテンツを再描画します
	<Plug>(gina-blame-C-L)		コンテンツを再描画し、<C-L>を更新して更新します

そして、次のデフォルトのキーマッピング
	
	<Return>	選択したチャンクでblameを開く
	<Backspace>	ナビゲーションの歴史的な以前のblameに戻る
	<C-L>		コンテンツを再描画し、<C-L>を更新して更新します

ユーザーは、デフォルトのエイリアス(shorten)やマッピングを無効にすることができます。

	|g:gina#command#blame#use_default_aliases|
	|g:gina#command#blame#use_default_mappings|

さらに、ユーザーは次の変数を使用してコンテンツをカスタマイズできます。

	|g:gina#command#blame#formatter#format|
	|g:gina#command#blame#formatter#separator|
	|g:gina#command#blame#formatter#current_mark|
	|g:gina#command#blame#formatter#timestamp_months|
	|g:gina#command#blame#formatter#timestamp_format1|
	|g:gina#command#blame#formatter#timestamp_format2|
>
以下は推奨されるカスタマイズですが、
ginaはチャンクのリビジョンの正確なSHA1を表示しません。
>
	" Echo chunk info with j/k
	call gina#custom#mapping#nmap(
	      \ 'blame', 'j',
	      \ 'j<Plug>(gina-blame-echo)'
	      \)
	call gina#custom#mapping#nmap(
	      \ 'blame', 'k',
	      \ 'k<Plug>(gina-blame-echo)'
	      \)
<
The above may influence the performance so it is not defined in default.
上記はパフォーマンスに影響を与える可能性があるため、
デフォルトでは定義されていません。

-----------------------------------------------------------------------------
BRANCH						*gina-buffer-branch*
					{scheme}:	branch
					'filetype':	gina-branch
					'autoread':	1

これは、|:Gina-branch|コマンドで表示される「ファイルではない」バッファです。
このバッファでは、ユーザーは次のアクショングループを使用できます。

	|gina-actions-branch|	(shorten)
	|gina-actions-browse| 
	|gina-actions-changes|
	|gina-actions-commit|
		"commit:checkout"は"checkout"にエイリアスされます
		"commit:checkout:track"は"checkout:track"にエイリアスされます
	|gina-actions-ls|
	|gina-actions-show|
	|gina-actions-yank|

そして、次のデフォルトのキーマッピング
	
	<Return>	ブランチをチェックアウトします(リモートの場合はヘッドを取り外します)

ユーザーは、デフォルトのエイリアス(shorten)やマッピングを無効にすることができます。

	|g:gina#command#branch#use_default_aliases|
	|g:gina#command#branch#use_default_mappings|

Note: アクションは、このバッファーで「マーク可能」として定義されていることに注意してください。
|gina-usage-action-mark|を参照してください詳細については。

-----------------------------------------------------------------------------
CHANGES						*gina-buffer-changes*
					{scheme}:	changes
					'filetype':	gina-changes

これは、|:Gina-changes|コマンドで表示される「ファイルではない」バッファです。
このバッファでは、ユーザーは次のアクショングループを使用できます。

	|gina-actions-browse|
	|gina-actions-compare|
	|gina-actions-diff|
	|gina-actions-edit|	(shorten)
	|gina-actions-show|
	|gina-actions-yank|

そして、次のデフォルトのキーマッピングが定義されています
	
	<Return>	ファイルの編集
	dd		統一された差分を開く
	DD		統一された差分を開く (vsplit)
	cc		比較する2つのバッファーを開きます
	CC		比較する2つのバッファーを開きます (tab)

ユーザーは、デフォルトのエイリアス(shorten)やマッピングを無効にすることができます。

	|g:gina#command#changes#use_default_aliases|
	|g:gina#command#changes#use_default_mappings|

-----------------------------------------------------------------------------
COMMIT						*gina-buffer-commit*
					{scheme}:	commit
					'filetype':	gina-commit

これは、|:Gina-commit|コマンドで表示される「ファイルではない」バッファです。

ユーザーが|:write|を使用してコンテンツを保存する場合
コマンドを実行すると、コンテンツがキャッシュされます。
コンテンツから読み取り、まだキャッシュされていない現在の変更を破棄するには、|:edit!|を使用します。
Note: 2つのコンテンツキャッシュが存在することに注意してください。
1つは"--amend"なしのコミット用で、もう1つは"--amend"付きのコミット用です。

ユーザーが|:quit|コマンドでバッファーを閉じると、
ユーザーは、次のような変更をコミットするかどうかを尋ねられます
>
	[gina] Do you want to commit changes? [Y(es)/n(o)]
<
"Y"は大文字で、ユーザーが応答せずに<Return>を押した場合、「はい」を意味します。
ユーザーが"n"または"no"と入力して<Return>を押すと、コミットはキャンセルされます。
Note: ユーザーが|:w|を使用してコンテンツをキャッシュする場合、
キャッシュされたメッセージは、ユーザーが"gina-commit"バッファーを再度開いたときに使用されます。

ユーザーが：wqコマンドでバッファーを閉じると、
確認プロンプトは表示されず、コミットはすぐに実行されます。

ユーザーが|:q!|コマンドでバッファを閉じるとき、
確認プロンプトは表示されず、コミットはキャンセルされます。

Note: このバッファーで使用できるアクションはありません。

The following <Plug> mapping is available on this buffer
このバッファでは、次の<Plug>マッピングを使用できます
	
	<Plug>(gina-commit-amend)	"--amend"オプションを切り替えます
	<Plug>(gina-diff-jump)		対応する行番号を持つ対応する
					ファイルにジャンプします。
					カーソルが削除された行
					(行は"-"から始まる)にあるときに
					ソースファイルにジャンプするか、
					カーソルが変更されていない行または追加された行に
					あるときに宛先ファイル(行が' 'または'+'から始まる)
					にジャンプする場合。
					'-v'または '--verbose'オプションが
					指定されている場合に表示されるdiff
					コンテンツでのみ機能します。

そして、次のデフォルトのキーマッピングが定義されています
	
	!		Switch --amendオプション
	<Return>	対応するファイルにジャンプ

ユーザーは、次の方法でデフォルトのマッピングを無効にできます。

	|g:gina#command#commit#use_default_mappings|

-----------------------------------------------------------------------------
DIFF						*gina-buffer-diff*
					{scheme}:	diff
					'filetype':	diff

これは、|:Gina-diff|コマンドで示される「ファイルのような」バッファです。

このバッファでは、次の<Plug>マッピングを使用できます
	
	<Plug>(gina-diff-jump)		対応する行番号を持つ対応する
					ファイルにジャンプします。
					カーソルが削除された行
					(行は"-"から始まる)にあるときに
					ソースファイルにジャンプするか、
					カーソルが変更されていない行または追加された行に
					あるときに宛先ファイル(行が' 'または'+'から始まる)
					にジャンプする場合。

そして、次のデフォルトのキーマッピングが定義されています
	
	<Return>	対応するファイルにジャンプ

ユーザーは、次の方法でデフォルトのマッピングを無効にできます。

	|g:gina#command#diff#use_default_mappings|

Note: このバッファーで使用できるアクションはありません。

-----------------------------------------------------------------------------
GREP						*gina-buffer-grep*
					{scheme}:	grep
					'filetype':	gina-grep

これは、|:Gina-grep|コマンドで示される「ファイルではない」バッファです。
アクションのエイリアスとデフォルトのマッピングは、
バッファ名の{rev}部分(|gina-buffer-naming|)に依存しています。
このバッファでは、ユーザーは次のアクショングループを使用できます。

	|gina-actions-browse|
	|gina-actions-compare|
	|gina-actions-diff|
	|gina-actions-edit|	(shorten when {rev} is missing)
	|gina-actions-export|
	|gina-actions-ls|
	|gina-actions-show|	(shorten when {rev} exists)
	|gina-actions-yank|

そして、次のデフォルトのキーマッピングが定義されています
	
	<Return>	ファイルの編集/表示({rev}によって異なります)

ユーザーは、デフォルトのエイリアス(shorten)やマッピングを無効にすることができます。

	|g:gina#command#qrep#use_default_aliases|
	|g:gina#command#qrep#use_default_mappings|

Note: アクションは、このバッファーで「マーク可能」として定義されていることに注意してください。
|gina-usage-action-mark|を参照してください詳細については。

-----------------------------------------------------------------------------
LOG						*gina-buffer-log*
					{scheme}:	log
					'filetype':	gina-log

これは、|:Gina-log|コマンドで示される「ファイルではない」バッファです。
このバッファでは、ユーザーは次のアクショングループを使用できます。

	|gina-actions-browse|
	|gina-actions-changes|
	|gina-actions-commit|
	|gina-actions-compare|
	|gina-actions-diff|
	|gina-actions-edit|
	|gina-actions-ls|
	|gina-actions-show|	(shorten)
	|gina-actions-yank|

そして、次のデフォルトのキーマッピングが定義されています
	
	<Return>	コミットまたはコンテンツを表示する

ユーザーは、デフォルトのエイリアス(shorten)やマッピングを無効にすることができます。

	|g:gina#command#log#use_default_aliases|
	|g:gina#command#log#use_default_mappings|

-----------------------------------------------------------------------------
LS						*gina-buffer-ls*
					{scheme}:	ls
					'filetype':	gina-ls

これは、|:Gina-ls|コマンドで示される「ファイルではない」バッファです。
アクションのエイリアスとデフォルトのマッピングは、
バッファ名の{rev}部分(|gina-buffer-naming|)に依存しています。
このバッファでは、ユーザーは次のアクショングループを使用できます。

	|gina-actions-browse|
	|gina-actions-changes|
	|gina-actions-compare|
	|gina-actions-diff|
	|gina-actions-edit|	(shorten when {rev} is missing)
	|gina-actions-show|	(shorten when {rev} exists)
	|gina-actions-yank|

そして、次のデフォルトのキーマッピングが定義されています
	
	<Return>	ファイルの編集/表示({rev}によって異なります)

ユーザーは、デフォルトのエイリアス(shorten)やマッピングを無効にすることができます。

	|g:gina#command#ls#use_default_aliases|
	|g:gina#command#ls#use_default_mappings|

-----------------------------------------------------------------------------
REFLOG						*gina-buffer-reflog*
					{scheme}:	reflog
					'filetype':	gina-reflog

これは、|:Gina-reflog|コマンドで示される「ファイルではない」バッファです。
このバッファでは、ユーザーは次のアクショングループを使用できます。

	|gina-actions-changes|
	|gina-actions-commit|
	|gina-actions-show|	(shorten)
	|gina-actions-yank|

そして、次のデフォルトのキーマッピングが定義されています
	
	<Return>	コミットまたはコンテンツを表示する

ユーザーは、デフォルトのエイリアス(shorten)やマッピングを無効にすることができます。

	|g:gina#command#reflog#use_default_aliases|
	|g:gina#command#reflog#use_default_mappings|

-----------------------------------------------------------------------------
REBASE						*gina-buffer-rebase*
					{scheme}:	NONE
					'filetype':	gitrebase

これはginaのバッファではありませんが、ユーザーが
'git rebase -i'を使用すると、'gitrebase'バッファーが開きます。
Ginaは、ユーザーを支援するために次のマッピングを提供します。

	<Return>	コミットをプレビューする
	<C-a>		コマンドを切り上げます
	<C-z>		コマンドを切り捨てる

少し異なるマッピングを使用する場合は、<Plug>マッピングを使用してください

	<Plug>(gina-rebase-open)
	<Plug>(gina-rebase-round-up)
	<Plug>(gina-rebase-round-down)

ユーザーはこの機能を無効にすることができます

	|g:gina_gitrebase_support_mappings|

-----------------------------------------------------------------------------
SHOW						*gina-buffer-show*
					{scheme}:	show
					'filetype':	git without {path}

これは、|:Gina-show|コマンドで示される「ファイルのような」バッファです。
次のコマンドもこのバッファを開いてコンテンツを比較します。

	|:Gina-blame|
	|:Gina-chaperon|
	|:Gina-compare|
	|:Gina-patch|

{path}が指定されていない場合、
このバッファーで次の<Plug>マッピングを使用できます。
	
	<Plug>(gina-diff-jump)		対応する行番号を持つ対応する
					ファイルにジャンプします。
					カーソルが削除された行
					(行は"-"から始まる)にあるときに
					ソースファイルにジャンプするか、
					カーソルが変更されていない行または追加された行に
					あるときに宛先ファイル(行が' 'または'+'から始まる)
					にジャンプする場合。


そして、次のデフォルトのキーマッピングが定義されています
	
	<Return>	対応するファイルにジャンプ

ユーザーは、次の方法でデフォルトのマッピングを無効にできます。

	|g:gina#command#show#use_default_mappings|

Note: このバッファーで使用できるアクションはありません。

-----------------------------------------------------------------------------
STASH						*gina-buffer-stash*
					{scheme}:	stash
					'filetype':	gina-stash
					'autoread':	1

これは、|:Gina-stash|コマンドで示される「ファイルではない」バッファです。
このバッファでは、ユーザーは次のアクショングループを使用できます。

	|gina-actions-diff|
	|gina-actions-stash|	(shorten)
	|gina-actions-yank|

そして、次のデフォルトのキーマッピングが定義されています
	
	<Return>	スタッシュに変更を表示する

ユーザーは、デフォルトのエイリアス(shorten)やマッピングを無効にすることができます。

	|g:gina#command#stash#use_default_aliases|
	|g:gina#command#stash#use_default_mappings|

Note: アクションは、このバッファーで「マーク可能」として定義されていることに注意してください。
|gina-usage-action-mark|を参照してください詳細については。

-----------------------------------------------------------------------------
STASH SHOW					*gina-buffer-stash-show*
					{scheme}:	stash
					'filetype':	gina-stash-show

これは、|:Gina-stash|コマンドで示される「ファイルではない」バッファです。
このバッファでは、ユーザーは次のアクショングループを使用できます。

	|gina-actions-compare|
	|gina-actions-diff|
	|gina-actions-edit|
	|gina-actions-show|	(shorten)
	|gina-actions-yank|

そして、次のデフォルトのキーマッピングが定義されています
	
	<Return>	コンテンツを隠し場所に表示する
	dd		隠し場所に統一された差分を表示する
	DD		隠し場所に統一された差分を表示する (vsplit)
	cc		隠し場所のコンテンツを比較する
	CC		隠し場所のコンテンツを比較する (tab)

ユーザーは、デフォルトのエイリアス(shorten)やマッピングを無効にすることができます。

	|g:gina#command#stash#show#use_default_aliases|
	|g:gina#command#stash#show#use_default_mappings|

-----------------------------------------------------------------------------
STATUS						*gina-buffer-status*
					{scheme}:	status
					'filetype':	gina-status
					'autoread':	1

This is a "non file-like" buffer which is shown by |:Gina-status| command.
これは、|:Gina-status|コマンドで示される「ファイルではない」バッファです。
このバッファでは、ユーザーは次のアクショングループを使用できます。

	|gina-actions-browse|
	|gina-actions-chaperon|
	|gina-actions-compare|
	|gina-actions-diff|
	|gina-actions-edit|	(shorten)
	|gina-actions-export|
	|gina-actions-index|	(shorten)
	|gina-actions-patch|
	|gina-actions-show|
	|gina-actions-yank|

そして、次のデフォルトのキーマッピングが定義されています
	
	<Return>	ファイルの編集
	dd		統一された差分を開く
	DD		統一された差分を開く (vsplit)
	cc		比較する2つのバッファーを開きます
	CC		比較する2つのバッファーを開きます (tab)
	pp		パッチを適用する3つのバッファを開きます
	PP		パッチを適用する3つのバッファを開きます (tab)
	!!		競合を解決するために3つのバッファを開きます
	<<		変更をステージングする
	>>		変更をアンステージングする
	--		ステージング/アンステージングの切り替え
	==		ローカルの変更を破棄する

ユーザーは、デフォルトのエイリアス(shorten)やマッピングを無効にすることができます。

	|g:gina#command#status#use_default_aliases|
	|g:gina#command#status#use_default_mappings|

Note: アクションは、このバッファーで「マーク可能」として定義されていることに注意してください。
|gina-usage-action-mark|を参照してください詳細については。

-----------------------------------------------------------------------------
TAG						*gina-buffer-tag*
					{scheme}:	tag
					'filetype':	gina-tag
					'autoread':	1

これは、|:Gina-tag|コマンドで示される「ファイルではない」バッファです。
このバッファでは、ユーザーは次のアクショングループを使用できます。

	|gina-actions-browse|
	|gina-actions-changes|
	|gina-actions-commit|
		"commit:checkout"は"checkout"にエイリアスされます
		"commit:checkout:track"は"checkout:track"にエイリアスされます
	|gina-actions-ls|
	|gina-actions-show|	(shorten)
	|gina-actions-tag|	(shorten)
	|gina-actions-yank|

そして、次のデフォルトのキーマッピングが定義されています
	
	<Return>	コミットまたはコンテンツを表示する

ユーザーは、デフォルトのエイリアス（短縮）やマッピングを無効にすることができます。

	|g:gina#command#tag#use_default_aliases|
	|g:gina#command#tag#use_default_mappings|

Note: アクションは、このバッファーで「マーク可能」として定義されていることに注意してください。
詳細については|gina-usage-action-mark|を参照してください。

=============================================================================
INTERFACE					*gina-interface*

-----------------------------------------------------------------------------
COMMANDS					*gina-commands*

Note: バッファを開くコマンドは<mods>を理解します。
ユーザースキャンが次のような方向を制御することを意味します
>
	:topleft Gina show --opener=vsplit
<
さらに、[+cmd]と[++opt]がサポートされています。
詳細については|gina-buffer-+cmd|および|gina-buffer-++opt|を参照してください。

						*:Gina*
:Gina {command} [{options}]
	{command}のginaコマンドまたはgitraw {command}を呼び出します。
	{command}が名前空間 "gina#command#"の下にある場合、
	{command}のginaコマンドを呼び出します。
	それ以外の場合は、|:Gina!|にフォールバックしてgitrawコマンドを呼び出します。

						*:Gina!*
:Gina! {command} [{options}]
	git raw {command}を非同期的に呼び出します。
	It calls a raw {command} ("git {command} {options}") and echo the result.
	元の{command}("git {command} {options}")を呼び出し、
	結果をエコーします。

						*:Gina!!*
:Gina!! {command} [{options}]
	シェルの下でgitraw {command}を呼び出します。
	:!|を使用します。または|:terminal| でgitの元の{command}を呼び出して、
	git add -p"や"git rebase -i"などのgitのインタラクティブ機能を許可します。
	Note: Vimユーザーは、改行をシェルに送信するために、
	<CR>ではなく<C-J>を押す必要がある場合があることに注意してください。

						*:Gina-blame*
:Gina blame [+cmd] [++opt] [{options}] [--root] [-L{range}...] [--reverse]
            [-M{num}] [-C{num}] [--since={date}] [{treeish}]
	"gina-blame"バッファを開いて、コンテンツの変更をblameします。
	{treeish}が欠落している場合、 ':'がデフォルトのtreeishとして使用されます。
	{treeish}の{path}部分を省略すると、警告が表示されて失敗します。

	{options}では次のことが許可されています。

	--group1={group}
		1番目のバッファに使用されるウィンドウグループ名
		(|gina-options-group|)
	--group2={group}
		2番目のバッファに使用されるウィンドウグループ名
		(|gina-options-group|)
	--opener={opener}
		1番目のバッファのオープナーコマンド
		(|gina-options-opener|)
	--line={line}
		最初の行番号
	--width={width}
		ナビゲーションバッファに使用される幅
	--format={format}
		ナビラインの作成に使用されるフォーマット文字列。
		(|g:gina#command#blame#formatter#format|)

	こちらも参照してください。
	|gina-buffer-blame|
	:!man git-blame

						*:Gina-branch*
:Gina branch [+cmd] [++opt] [{options}] [-r | -a] [--list]
             [-v | -vv | --verbose]
             [(--merged | --no-merged | --contains)={commit}]
             [--sort={key}] [--points-at={object}] [{pattern}...]
:Gina branch [--set-upstream | --track | --no-track] [-l] [-f] {branchname}
             [{start-point}]
:Gina branch (--set-upstream-to={upstream} | -u{upstream}) [{branchname}]
:Gina branch --unset-upstream [{branchname}]
:Gina branch (--move | -m | -M) [-f] [{oldbranch}] {newbranch}
:Gina branch (--delete | -d | -D) [-r] [-f] {branchname}...
	"gina-branch"バッファを開いて、ブランチを一覧表示して操作するか、
	元の"git branch"コマンドを実行します。

	{options}では次のことが許可されています。

	--group={group}
		バッファに使用されるウィンドウグループ名
		(|gina-options-group|)
	--opener={opener}
		新しいバッファのオープナーコマンド
		(|gina-options-opener|)
	
	Note: "-edit-description"はサポートされていません。
	この機能が必要な場合は、GitHubで機能リクエストの問題を作成してください。
	

	こちらも参照してください。
	|gina-buffer-branch|
	:!man git-branch

						*:Gina-browse*
:Gina browse [{options}] [{treeish}]
	接続されているリモートリポジトリの{treeish}のリモートコンテンツを
	システムブラウザ（Firefox、Google Chromeなど）に表示します。
	{treeish}が欠落している場合、{treeish}の{rev}部分は現在のバッファーから推測され、{path}部分は省略されます。
	{path}の部分も推測したい場合は、代わりに":"を使用してください(|gina-misc-treeish)。

	{options}では次のことが許可されています。

	--scheme={scheme}
		指定されたスキームを使用して、リモートURLを作成します。
		現在、"_","root","blame",または"compare"は
		github.comまたはbitbucket.orgで入手できます。
	--exact
		ブランチ名の代わりに正確なリビジョンを使用する
	--yank
		開く代わりにURLをヤンクする
	
	このコマンドは現在、github.comとbitbucket.orgをサポートしています。
	ユーザーは、|g:gina#command#browse#translation_patterns|にエントリを追加することにより、
	他のWebサービスのルールを追加できます。

						*:Gina-cd*
:Gina cd [{path}]
	|:cd|コマンドを使用して、現在のディレクトリを{path}
	またはリポジトリルートに変更します。

	こちらも参照してください。
	|:Gina-lcd|

						*:Gina-changes*
:Gina changes [+cmd] [++opt] [{options}] [{rev}] [-- {pathspec}...]
	"gina-changes"バッファを開いて、
	{rev}またはインデックスのファイルごとの変更を一覧表示します。
	{rev}が欠落している場合は、現在のバッファーから推測されます。
	":0"を使用してインデックスを強制します(|gina-misc-treeish|)。

	{options}では次のことが許可されています。

	--group={group}
		バッファーに使用されるウィンドウグループ名
		(|gina-options-group|)
	--opener={opener}
		新しいバッファのオープナーコマンド
		(|gina-options-opener|)

	内部で"git diff --numstat"を使用するため、他の利用可能な{options}については
	"man git-diff"を参照してください。

	こちらも参照してください。
	|gina-buffer-changes|
	:!man git-diff

						*:Gina-chaperon*
:Gina chaperon [+cmd] [++opt] [{options}] [{path}]
	コンフリクトを解決するために3-way diffを開きます。
	{path}が欠落している場合は、現在のバッファから推測されます。

	{options}では次のことが許可されています。
	
	--group1={group}
		1番目のバッファに使用されるウィンドウグループ名
		(|gina-options-group|)
	--group2={group}
		2番目のバッファに使用されるウィンドウグループ名
		(|gina-options-group|)
	--group3={group}
		3番目のバッファーに使用されるウィンドウグループ名
		(|gina-options-group|)
	--opener={opener}
		新しいバッファのオープナーコマンド
		(|gina-options-opener|)
	--line={line}
		最初の行番号
	--col={col}
		最初の列番号

	|:Gina-edit|および|:Gina-show|コマンドによって次のバッファを開きます。

	REMOTE:		gina://{refname}:show/:3:{path}
	WORKTREE:	{path}
	LOCAL:		gina://{refname}:show/:2:{path}

	ユーザーは|:diffput|および|:diffget|で差分コンテンツのコピーを使用できます。
	さらに、ginaは次の追加のマッピングを定義します。

	REMOTE/LOCAL
	<Plug>(gina-diffput)	差分チャンクをWORKTREEバッファーに入れます。
				デフォルトでは"dp"に割り当てられています。
	
	WORKTREE
	<Plug>(gina-diffget-l)	ローカルバッファからdiffチャンクを取得します。
				デフォルトでは「dol」に割り当てられています。
	<Plug>(gina-diffget-r)	REMOTEバッファーからdiffチャンクを取得します。
				デフォルトでは「dor」に割り当てられています。

	こちらも参照してください。
	|:Gina-patch|

						*:Gina-commit*
:Gina commit [+cmd] [++opt] [{options}] [-a] [-s] [-v] [-u{mode}]
             [--amend] [(-c | -C | --fixup= | --squash=){commit}]
             [--reset-author] [--allow-empty] [--allow-empty-message]
             [--no-verify] [-e] [--author={author}]
             [--date={date}] [--cleanup={mode}] [--[no-]status] [-i | -o]
             [-S{keyid}] [--] [{file}...]
:Gina commit (-p | --interactive) [-s] [-v] [-u{mode}]
             [--amend] [(-c | -C | --fixup= | --squash=){commit}]
             [--reset-author] [--allow-empty] [--allow-empty-message]
             [--no-verify] [-e] [--author={author}]
             [--date={date}] [--cleanup={mode}] [--[no-]status] [-i | -o]
             [-S{keyid}] [--] [{file}...]
:Gina commit (-F{file} | -m{msg}) [-a] [-s] [-v] [-u{mode}]
             [--amend] [(-c | -C | --fixup= | --squash=){commit}]
             [--reset-author] [--allow-empty] [--allow-empty-message]
             [--no-verify] [-e] [--author={author}]
             [--date={date}] [--cleanup={mode}] [--[no-]status] [-i | -o]
             [-S{keyid}] [--] [{file}...]
	"gina-commit"バッファを開いて変更をコミットするか、
	元の"git commit"コマンドを実行します。
	ユーザーはこのバッファーにコミットメッセージを書き込むことができ、
	ユーザーが|:q|または|:wq|でバッファーを閉じると実際のコミットが実行されます。

	対応するgitコマンドのオプションに加えて、
	{options}では次のことが許可されています。

	--group={group}
		バッファに使用されるウィンドウグループ名
		(|gina-options-group|)
	--opener={opener}
		新しいバッファのオープナーコマンド
		(|gina-options-opener|)
	--restore
		|:q|または|:wq|でコミットバッファを閉じた後、
		前のバッファを復元します。

	こちらも参照してください。
	|gina-buffer-commit|
	|:Gina-status|

						*:Gina-compare*
:Gina compare [+cmd] [++opt] [{options}] [{treeish}]
	2つのバッファを開いて、{path}の内容を
	1)作業ツリーとインデックスまたは{rev}、
	2)インデックスとHEADまたは{rev}の間で比較します。
	{treeish}が欠落している場合、
	':'がデフォルトのtreeishとして使用されます。
	{treeish}の{path}部分を省略すると、警告が表示されて失敗します。

	{options}では次のことが許可されています。

	--group1={group}
		1番目のバッファに使用されるウィンドウグループ名
		(|gina-options-group|)
	--group2={group}
		2番目のバッファに使用されるウィンドウグループ名
		(|gina-options-group|)
	--opener={opener}
		1番目のバッファのオープナーコマンド
		(|gina-options-opener|)
	--line={line}
		最初の行番号
	--col={col}
		最初の列番号
	--cached
		作業ツリーではなくインデックスと比較する
	-R
		バッファの順序を逆にします。

	2番目のバッファを開くときに「diffopt」を尊重します。
	2番目のバッファーを垂直方向に開く場合は、オプションに「垂直」を追加します。

	こちらも参照してください。
	|gina-buffer-compare|
	|:Gina-diff|

						*:Gina-diff*
:Gina diff [+cmd] [++opt] [{options}] [{treeish}]
	1）作業ツリーとインデックスまたは{rev}、
	2）インデックスとHEADまたは{rev}の間の{path}またはリポジトリの統一された差分を表示します。
	{treeish}が欠落している場合、{treeish}の{rev}部分は現在のバッファーから推測され、{path}部分は省略されます。
	{path}の部分も推測したい場合は、代わりに":"を使用してください(|gina-misc-treeish|)。

	対応するgitコマンドのオプションに加えて、
	{options}では次のことが許可されています。

	--group={group}
		バッファに使用されるウィンドウグループ名
		(|gina-options-group|)
	--opener={opener}
		新しいバッファのオープナーコマンド
		(|gina-options-opener|)

	こちらも参照してください。
	|gina-buffer-diff|
	|:Gina-compare|
	:!man git-diff

						*:Gina-edit*
:Gina edit [+cmd] [++opt] [{options}] [{path}]
	作業ツリーで{path}のコンテンツを開きます。
	{path}が欠落している場合は、現在のバッファから推測されます。

	{options}では次のことが許可されています。

	--group={group}
		バッファに使用されるウィンドウグループ名
		(|gina-options-group|)
	--opener={opener}
		新しいバッファのオープナーコマンド
		(|gina-options-opener|)
	--line={line}
		最初の行番号
	--col={col}
		最初の列番号

	こちらも参照してください。
	|:Gina-diff|
	|:Gina-show|

						*:Gina-grep*
:Gina grep [+cmd] [++opt] [{options}] [{pattern}] [{rev}] [-- {pathspec}...]
	"gina-grep"バッファを開いて、
	指定されたパターンを含むファイルを表示します。
	{rev}が欠落している場合は、現在のバッファーから推測されます。
	":0"を使用してインデックスを強制します(|gina-misc-treeish|)。

	対応するgitコマンドのオプションに加えて、
	{options}では次のことが許可されています。

	--group={group}
		バッファに使用されるウィンドウグループ名
		(|gina-options-group|)
	--opener={opener}
		新しいバッファのオープナーコマンド
		(|gina-options-opener|)

	こちらも参照してください。
	|gina-buffer-grep|
	|:Gina-qrep|

						*:Gina-lcd*
:Gina lcd [{path}]
	|:lcd|コマンドを使用して、現在のディレクトリを{path}
	またはリポジトリルートに変更します。

	こちらも参照してください。
	|:Gina-cd|

						*:Gina-log*
:Gina log [+cmd] [++opt] [{options}] [{treeish}] [-- {pathspec}...]
	"gina-log"バッファを開いて、{treeish}または
	リポジトリのコミットを表示します。
	{treeish}の{path}部分が欠落している場合は、
	リポジトリのログが表示されます。

	対応するgitコマンドのオプションに加えて、
	{options}では次のことが許可されています。

	--group={group}
		バッファに使用されるウィンドウグループ名
		(|gina-options-group|)
	--opener={opener}
		新しいバッファのオープナーコマンド
		(|gina-options-opener|)

	こちらも参照してください。
	|gina-buffer-log|
	:!man git-log

						*:Gina-ls*
:Gina ls [+cmd] [++opt] [{options}] [{rev}] [-- {pathspec}...]
	作業ツリー、インデックス、またはコミット内のファイルを一覧表示します。
	{rev}が欠落している場合は、現在のバッファーから推測されます。
	":0"を使用してインデックスを強制します(|gina-misc-treeish|)。

	対応するgitコマンドのオプションに加えて、
	{options}では次のことが許可されています。

	--group={group}
		バッファに使用されるウィンドウグループ名
		(|gina-options-group|)
	--opener={opener}
		新しいバッファのオープナーコマンド
		(|gina-options-opener|)

	Note: {rev}が指定されている場合、内部で"git ls-tree"を使用することに注意してください。
	それ以外の場合は、内部で"git ls-files"を使用します。

	こちらも参照してください。
	|gina-buffer-ls|
	:!man git-ls-files
	:!man git-ls-tree

						*:Gina-patch*
:Gina patch [+cmd] [++opt] [{options}] [{path}]
	3つのバッファを開いて、{path}の変更をインデックスにパッチします。
	{path}が欠落している場合は、現在のバッファから推測されます。

	{options}では次のことが許可されています。

	--oneside
		代わりに2つのバッファ（INDEXとWORKTREE）を開きます
	--group1={group}
		1番目のバッファに使用されるウィンドウグループ名
		(|gina-options-group|)
	--group2={group}
		2番目のバッファに使用されるウィンドウグループ名
		(|gina-options-group|)
	--group3={group}
		3番目のバッファーに使用されるウィンドウグループ名
		(|gina-options-group|)
	--opener={opener}
		1番目のバッファのオープナーコマンド
		(|gina-options-opener|)
	--line={line}
		最初の行番号
	--col={col}
		最初の列番号

	2番目と3番目のバッファを開くときに"diffopt"を尊重します。
	2番目、3番目のバッファーを垂直に開く場合は、オプションに"vertical"を追加します。

	|:Gina-edit|および|:Gina-show|コマンドによって次のバッファを開きます。

	HEAD:		gina://{refname}:show/HEAD:{path}
	INDEX:		gina://{refname}:show/:{path}
	WORKTREE:	{path}

	ユーザーは|:diffput|を使用できますおよび|:diffget|差分コンテンツをコピーします。
	さらに、ginaは次の追加のマッピングを定義します。

	HEAD/WORKTREE
	<Plug>(gina-diffput)	diffチャンクをINDEXバッファーに入れます。
				デフォルトでは"dp"に割り当てられています。

	WORKTREE
	<Plug>(gina-diffget)	INDEXバッファーからdiffチャンクを取得します。
				デフォルトでは"do"に割り当てられています。
	
	INDEX
	<Plug>(gina-diffget-l)	HEADバッファーからdiffチャンクを取得します。
				デフォルトでは"dol"に割り当てられています。
	<Plug>(gina-diffget-r)	WORKTREEバッファーからdiffチャンクを取得します。
				デフォルトでは"dor"に割り当てられています。

	こちらも参照してください。
	|:Gina-chaperon|

						*:Gina-qrep*
:Gina qrep[!] [{options}] [--{pathspec}...]
	|:Gina-grep|に似ていますが、
	|quickfix|ウィンドウを使用して結果を表示する。
	
	Vimのビルトインを模倣しようとします|：grep |コマンド。
	1. |:silent|を使用しますメッセージを抑制したい場合
	2. 最初の候補者に焦点を合わせたくない場合は、bung(!)を使用します
	3. |QuickFixCmdPre|を使用します事前の操作が必要な場合
	4. |QuickFixCmdPost|を使用します
	   後部操作が必要な場合（|quickfix|ウィンドウを開くなど）

	{options}では次のことが許可されています。

	--action={action}
		|setqflist()|に指定されたアクション。

	こちらも参照してください。
	:!man git-grep

						*:Gina-reflog*
:Gina reflog [+cmd] [++opt] [{options}]
	"gina-reflog"バッファを開いて、リポジトリのreflogを確認します。

	対応するgitコマンドのオプションに加えて、
	{options}では次のことが許可されています。

	--group={group}
		バッファに使用されるウィンドウグループ名
		(|gina-options-group|)
	--opener={opener}
		新しいバッファのオープナーコマンド
		(|gina-options-opener|)

	こちらも参照してください。
	|gina-buffer-reflog|
	:!man git-reflog

						*:Gina-show*
:Gina show [+cmd] [++opt] [{options}] [{treeish}] [-- {pathspec}...]
	{rev}のコミットまたは{path}のコンテンツを{rev}に表示します。
	{treeish}が欠落している場合、{treeish}の{rev}部分は
	現在のバッファーから推測され、{path}部分は省略されます。
	代わりに":"を使用してください

	対応するgitコマンドのオプションに加えて、
	{options}では次のことが許可されています。

	--group={group}
		バッファに使用されるウィンドウグループ名
		(|gina-options-group|)
	--opener={opener}
		新しいバッファのオープナーコマンド
		(|gina-options-opener|)
	--line={line}
		{path}が省略されていない場合の最初の行番号。
	--col={col}
		{path}が省略されていない場合の最初の列番号。

	こちらも参照してください。
	|gina-buffer-show|
	:!man git-show

						*:Gina-stash*
:Gina stash [+cmd] [++opt] [{options}]
:Gina stash [+cmd] [++opt] list [{options}]
:Gina stash [+cmd] [++opt] show [{options}]
	git rawコマンドを実行するか、"gina-stash"バッファーを開いて
	stashの一覧表示するか、"gina-stash-show"バッファーを開いて変更を表示します。

	対応するgitコマンドのオプションに加えて、
	{options}では次のことが許可されています。

	--group={group}
		バッファに使用されるウィンドウグループ名
		(|gina-options-group|)
	--opener={opener}
		新しいバッファのオープナーコマンド
		(|gina-options-opener|)

	こちらも参照してください。
	|gina-buffer-stash|
	|gina-buffer-stash-show|
	:!man git-status

						*:Gina-status*
:Gina status [+cmd] [++opt] [{options}] [-- {pathspec}...]
	"gina-status"バッファを開いて、リポジトリのステータスを表示します。

	対応するgitコマンドのオプションに加えて、
	{options}では次のことが許可されています。

	--group={group}
		バッファに使用されるウィンドウグループ名
		(|gina-options-group|)
	--opener={opener}
		新しいバッファのオープナーコマンド
		(|gina-options-opener|)

	こちらも参照してください。
	|gina-buffer-status|
	:!man git-status

						*:Gina-tag*
:Gina tag [+cmd] [++opt] [{options}]
	"gina-tag"バッファを開いてタグを一覧表示します。

	対応するgitコマンドのオプションに加えて、
	{options}では次のことが許可されています。

	--group={group}
		バッファに使用されるウィンドウグループ名
		(|gina-options-group|)
	--opener={opener}
		新しいバッファのオープナーコマンド
		(|gina-options-opener|)
	--restore
		|:q|または|:wq|でタグメッセージ編集バッファを閉じた後、
		前のバッファを復元します。

	Note: "-a/--annotate"の場合、タグメッセージ編集バッファが開きます。
	"-s/--sign"または"-u{keyid}/--local-user={keyid}"が指定されており、
	"gina-commit"バッファのようにバッファが閉じたときに実際のタグ作成が実行されます。

	Note: "-d/--delete"の場合、元のgitコマンドを実行することに注意してください。
	"-v/--verify"、または"-l/--list"のない位置引数が指定されています。

	こちらも参照してください。
	|gina-buffer-tag|
	:!man git-tag
	
-----------------------------------------------------------------------------
FUNCTIONS					*gina-functions*

					*gina#action#call()*
gina#action#call({expr} [, {fline} [, {lline}]])
gina#action#call({expr}, {candidates})
	Call an action which is determined from {expr}.

	If {expr} contains <mods>, the action will be called with the
	specified command modifiers.
	If {expr} ends with an action alias, an aliased action will be called.

	Without extra arguments, the action will be called with

	1. A candidate of the current line
	2. Marked candidates if the action is defined to use marks

	If {fline} is specified, a candidate at {fline} is used.
	If {fline} and {lline} are specified, candidates between {fline} and
	{lline} are used.
	If {candidates} list is specified, the specified candidates will be
	used.

	Note that the API with {fline}, {lline}, and {candidates} has not
	settled yet so users should not use it without understanding.

					*gina#custom#action#alias()*
gina#custom#action#alias({scheme}, {alias}, {name})
	Add an {alias} of {name} action on {scheme} buffers.
	Users can access the action with the {alias} in "builtin:choice".
	Note that this alias will not affect to a mappin name.
	Note that "/{pattern}" for {scheme} is used to apply the function for
	buffers which matches with {pattern}.

	See also~
	|gina-custom-action|

					*gina#custom#action#shorten()*
gina#custom#action#shorten({scheme}, {action_scheme} [, {excludes}])
	Automatically add shorten aliases of actions in {action_scheme} on
	{scheme} buffers.
	Note that "/{pattern}" for {scheme} is used to apply the function for
	buffers which matches with {pattern}.

	See also~
	|gina-custom-action-shorten|

					*gina#custom#command#alias()*
gina#custom#command#alias({scheme}, {alias} [, {raw}])
	Define a command alias of {scheme} to {alias}.
	If {raw} is specified, it alias to a git raw command instead of a
	gina's command.
	Note that "/{pattern}" for {scheme} is not allowed in this function.

	See also~
	|gina-custom-command-alias|

					*gina#custom#command#option()*
gina#custom#command#option({scheme}, {option} [, {value}])
	Define a default command {option} for a {scheme} command.
	If {value} is omitted, 1 is used instead.

	The function automatically add a option remover "--no-{option}" when
	the {value} is 1. So that user can disable the default option by using
	that remover option.

	Note that the default options are applied based on the alias, namely
	the default options for "status" and "st" (assume this is an alias
	of "status") are different.

	Note that "/{pattern}" for {scheme} is used to apply the function for
	commands which matches with {pattern}.

	See also~
	|gina-custom-command|
	|gina-custom-command-alias|

					*gina#component#repo#preset()*
gina#component#repo#preset([{kind}])
	Return a cached repository information which includes a repository
	name, a current branch name, and a tracking branch name.
>
	" With a tracking branch
	echo gina#component#repo#preset()
	" -> 'gina.vim [master -> origin/master]'

	echo gina#component#repo#preset('fancy')
	" -> 'gina.vim [master → origin/master]'

	" Without a tracking branch
	echo gina#component#repo#preset()
	" -> 'gina.vim [master]'

	echo gina#component#repo#preset('fancy')
	" -> 'gina.vim [master]'
<
	It uses the following raw component functions internally.
	|gina#component#repo#name()|
	|gina#component#repo#branch()|
	|gina#component#repo#track()|
 
					*gina#component#repo#name()*
gina#component#repo#name()
	Return a name of the current repository, namely it is a directory name
	of the repository.

					*gina#component#repo#branch()*
gina#component#repo#branch()
	Return a cached name of the current branch.

					*gina#component#repo#track()*
gina#component#repo#track()
	Return a cached name of the tracking branch of the current branch.

					*gina#component#status#preset()*
gina#component#status#preset([{kind}])
	Return a cached repository status which includes a number of the
	staged, unstaged, and conflicted files.
>
	echo gina#component#status#preset()
	" -> '<2 >4 x3'

	echo gina#component#status#preset('fancy')
	" -> '«2 »4 ×3'
<
	It uses the following raw component functions internally.
	|gina#component#status#staged()|
	|gina#component#status#unstaged()|
	|gina#component#status#conflicted()|

					*gina#component#status#staged()*
gina#component#status#staged()
	Return a cached number of staged files.

					*gina#component#status#unstaged()*
gina#component#status#unstaged()
	Return a cached number of unstaged files.

					*gina#component#status#conflicted()*
gina#component#status#conflicted()
	Return a cached number of conflicted files.

					*gina#component#traffic#preset()*
gina#component#traffic#preset([{kind}])
	Return a cached traffic information between a current branch and a
	current tracking branch.
>
	echo gina#component#traffic#preset()
	" -> '^2 v4'

	echo gina#component#traffic#preset('fancy')
	" -> '↑2 ↓4'
<
	It uses the following raw component functions internally.
	|gina#component#traffic#ahead()|
	|gina#component#traffic#behind()|

					*gina#component#traffic#ahead()*
gina#component#traffic#ahead()
	Return a cached number of commits ahead of the current tracking
	branch.
					*gina#component#traffic#behind()*
gina#component#traffic#behind()
	Return a cached number of commits behind of the current tracking
	branch.

					*gina#custom#mapping#map()*
					*gina#custom#mapping#nmap()*
					*gina#custom#mapping#vmap()*
					*gina#custom#mapping#imap()*
gina#custom#mapping#map({scheme}, {lhs}, {rhs} [, {options}])
gina#custom#mapping#nmap({scheme}, {lhs}, {rhs} [, {options}])
gina#custom#mapping#vmap({scheme}, {lhs}, {rhs} [, {options}])
gina#custom#mapping#imap({scheme}, {lhs}, {rhs} [, {options}])
	Define {lhs} to {rhs} mapping on {scheme} buffers.
	The {options} may contains the following attributes

	"mode"		A single character for a prefix of a |:map| command
			This is overwritten when nmap, vmap, or imap version
			of the function has used.
			Default is ""
	"noremap"	Use |:noremap| instead of |:map|.
			Default is 0
	"buffer"	Add <buffer> to the command
			Default is 1
	"nowait"	Add <nowait> to the command
			Default is 0
	"silent"	Add <silent> to the command
			Default is 0
	"special"	Add <special> to the command
			Default is 0
	"script"	Add <script> to the command
			Default is 0
	"unique"	Add <unique> to the command
			Default is 0
	"expr"		Add <expr> to the command
			Default is 0

	Note that "/{pattern}" for {scheme} is used to apply the function for
	buffers which matches with {pattern}.

	See also~
	|gina-custom-mapping|

-----------------------------------------------------------------------------
=============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
